;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit DQNAccelertorTop : 
  module DualPortedMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<6>, flip writeAddr : UInt<6>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[64], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<6>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 5, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_32 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_33 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_34 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_35 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_36 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_37 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_38 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_39 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_40 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_41 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_42 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_43 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_44 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_45 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_46 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_47 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_48 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_49 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_50 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_51 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_52 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_53 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_54 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_55 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_56 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_57 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_58 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_59 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_60 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_61 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_62 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module DualPortedMem_63 : 
    input clock : Clock
    input reset : Reset
    output io : {flip wrData : SInt<8>, rdData : SInt<8>, flip readAddr : UInt<3>, flip writeAddr : UInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    node _T = and(io.wrEna, io.rdEna) @[SRAM.scala 19:21]
    node _T_1 = eq(io.readAddr, io.writeAddr) @[SRAM.scala 19:48]
    node _T_2 = and(_T, _T_1) @[SRAM.scala 19:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SRAM.scala 19:10]
    node _T_4 = asUInt(reset) @[SRAM.scala 19:9]
    node _T_5 = or(_T_3, _T_4) @[SRAM.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[SRAM.scala 19:9]
    when _T_6 : @[SRAM.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed: undefined behavior in dual-ported SRAM \n    at SRAM.scala:19 assert(!(io.wrEna && io.rdEna && io.readAddr === io.writeAddr), \"undefined behavior in dual-ported SRAM \")\n") @[SRAM.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[SRAM.scala 19:9]
      skip @[SRAM.scala 19:9]
    smem mem : SInt<8>[8], undefined @[SRAM.scala 20:24]
    when io.wrEna : @[SRAM.scala 21:17]
      write mport MPORT = mem[io.writeAddr], clock
      MPORT <= io.wrData
      skip @[SRAM.scala 21:17]
    wire _io_rdData_WIRE : UInt @[SRAM.scala 24:24]
    _io_rdData_WIRE is invalid @[SRAM.scala 24:24]
    when io.rdEna : @[SRAM.scala 24:24]
      _io_rdData_WIRE <= io.readAddr @[SRAM.scala 24:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<3>("h00")) @[SRAM.scala 24:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 2, 0) @[SRAM.scala 24:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[SRAM.scala 24:24]
      skip @[SRAM.scala 24:24]
    io.rdData <= io_rdData_MPORT @[SRAM.scala 24:13]
    
  module ActivationBlock : 
    input clock : Clock
    input reset : Reset
    output io : {flip activationFunc : UInt<2>, flip weightedSum : SInt<8>[32], activation : SInt<8>[32], valid : UInt<1>, flip ena : UInt<1>}
    
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T : @[ActivationBlock.scala 53:43]
        io.activation[0] <= io.weightedSum[0] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_0_T = bits(io.weightedSum[0], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_0_T_1 = bits(_io_activation_0_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_0_T_2 = mux(_io_activation_0_T_1, asSInt(UInt<1>("h00")), io.weightedSum[0]) @[ActivationBlock.scala 56:32]
        io.activation[0] <= _io_activation_0_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[0] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_1 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_1 : @[ActivationBlock.scala 53:43]
        io.activation[1] <= io.weightedSum[1] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_1_T = bits(io.weightedSum[1], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_1_T_1 = bits(_io_activation_1_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_1_T_2 = mux(_io_activation_1_T_1, asSInt(UInt<1>("h00")), io.weightedSum[1]) @[ActivationBlock.scala 56:32]
        io.activation[1] <= _io_activation_1_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[1] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_2 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_2 : @[ActivationBlock.scala 53:43]
        io.activation[2] <= io.weightedSum[2] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_2_T = bits(io.weightedSum[2], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_2_T_1 = bits(_io_activation_2_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_2_T_2 = mux(_io_activation_2_T_1, asSInt(UInt<1>("h00")), io.weightedSum[2]) @[ActivationBlock.scala 56:32]
        io.activation[2] <= _io_activation_2_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[2] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_3 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_3 : @[ActivationBlock.scala 53:43]
        io.activation[3] <= io.weightedSum[3] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_3_T = bits(io.weightedSum[3], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_3_T_1 = bits(_io_activation_3_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_3_T_2 = mux(_io_activation_3_T_1, asSInt(UInt<1>("h00")), io.weightedSum[3]) @[ActivationBlock.scala 56:32]
        io.activation[3] <= _io_activation_3_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[3] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_4 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_4 : @[ActivationBlock.scala 53:43]
        io.activation[4] <= io.weightedSum[4] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_4_T = bits(io.weightedSum[4], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_4_T_1 = bits(_io_activation_4_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_4_T_2 = mux(_io_activation_4_T_1, asSInt(UInt<1>("h00")), io.weightedSum[4]) @[ActivationBlock.scala 56:32]
        io.activation[4] <= _io_activation_4_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[4] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_5 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_5 : @[ActivationBlock.scala 53:43]
        io.activation[5] <= io.weightedSum[5] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_5_T = bits(io.weightedSum[5], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_5_T_1 = bits(_io_activation_5_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_5_T_2 = mux(_io_activation_5_T_1, asSInt(UInt<1>("h00")), io.weightedSum[5]) @[ActivationBlock.scala 56:32]
        io.activation[5] <= _io_activation_5_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[5] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_6 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_6 : @[ActivationBlock.scala 53:43]
        io.activation[6] <= io.weightedSum[6] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_6_T = bits(io.weightedSum[6], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_6_T_1 = bits(_io_activation_6_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_6_T_2 = mux(_io_activation_6_T_1, asSInt(UInt<1>("h00")), io.weightedSum[6]) @[ActivationBlock.scala 56:32]
        io.activation[6] <= _io_activation_6_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[6] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_7 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_7 : @[ActivationBlock.scala 53:43]
        io.activation[7] <= io.weightedSum[7] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_7_T = bits(io.weightedSum[7], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_7_T_1 = bits(_io_activation_7_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_7_T_2 = mux(_io_activation_7_T_1, asSInt(UInt<1>("h00")), io.weightedSum[7]) @[ActivationBlock.scala 56:32]
        io.activation[7] <= _io_activation_7_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[7] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_8 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_8 : @[ActivationBlock.scala 53:43]
        io.activation[8] <= io.weightedSum[8] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_8_T = bits(io.weightedSum[8], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_8_T_1 = bits(_io_activation_8_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_8_T_2 = mux(_io_activation_8_T_1, asSInt(UInt<1>("h00")), io.weightedSum[8]) @[ActivationBlock.scala 56:32]
        io.activation[8] <= _io_activation_8_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[8] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_9 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_9 : @[ActivationBlock.scala 53:43]
        io.activation[9] <= io.weightedSum[9] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_9_T = bits(io.weightedSum[9], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_9_T_1 = bits(_io_activation_9_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_9_T_2 = mux(_io_activation_9_T_1, asSInt(UInt<1>("h00")), io.weightedSum[9]) @[ActivationBlock.scala 56:32]
        io.activation[9] <= _io_activation_9_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[9] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_10 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_10 : @[ActivationBlock.scala 53:43]
        io.activation[10] <= io.weightedSum[10] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_10_T = bits(io.weightedSum[10], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_10_T_1 = bits(_io_activation_10_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_10_T_2 = mux(_io_activation_10_T_1, asSInt(UInt<1>("h00")), io.weightedSum[10]) @[ActivationBlock.scala 56:32]
        io.activation[10] <= _io_activation_10_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[10] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_11 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_11 : @[ActivationBlock.scala 53:43]
        io.activation[11] <= io.weightedSum[11] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_11_T = bits(io.weightedSum[11], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_11_T_1 = bits(_io_activation_11_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_11_T_2 = mux(_io_activation_11_T_1, asSInt(UInt<1>("h00")), io.weightedSum[11]) @[ActivationBlock.scala 56:32]
        io.activation[11] <= _io_activation_11_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[11] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_12 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_12 : @[ActivationBlock.scala 53:43]
        io.activation[12] <= io.weightedSum[12] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_12_T = bits(io.weightedSum[12], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_12_T_1 = bits(_io_activation_12_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_12_T_2 = mux(_io_activation_12_T_1, asSInt(UInt<1>("h00")), io.weightedSum[12]) @[ActivationBlock.scala 56:32]
        io.activation[12] <= _io_activation_12_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[12] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_13 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_13 : @[ActivationBlock.scala 53:43]
        io.activation[13] <= io.weightedSum[13] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_13_T = bits(io.weightedSum[13], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_13_T_1 = bits(_io_activation_13_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_13_T_2 = mux(_io_activation_13_T_1, asSInt(UInt<1>("h00")), io.weightedSum[13]) @[ActivationBlock.scala 56:32]
        io.activation[13] <= _io_activation_13_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[13] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_14 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_14 : @[ActivationBlock.scala 53:43]
        io.activation[14] <= io.weightedSum[14] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_14_T = bits(io.weightedSum[14], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_14_T_1 = bits(_io_activation_14_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_14_T_2 = mux(_io_activation_14_T_1, asSInt(UInt<1>("h00")), io.weightedSum[14]) @[ActivationBlock.scala 56:32]
        io.activation[14] <= _io_activation_14_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[14] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_15 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_15 : @[ActivationBlock.scala 53:43]
        io.activation[15] <= io.weightedSum[15] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_15_T = bits(io.weightedSum[15], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_15_T_1 = bits(_io_activation_15_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_15_T_2 = mux(_io_activation_15_T_1, asSInt(UInt<1>("h00")), io.weightedSum[15]) @[ActivationBlock.scala 56:32]
        io.activation[15] <= _io_activation_15_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[15] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_16 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_16 : @[ActivationBlock.scala 53:43]
        io.activation[16] <= io.weightedSum[16] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_16_T = bits(io.weightedSum[16], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_16_T_1 = bits(_io_activation_16_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_16_T_2 = mux(_io_activation_16_T_1, asSInt(UInt<1>("h00")), io.weightedSum[16]) @[ActivationBlock.scala 56:32]
        io.activation[16] <= _io_activation_16_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[16] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_17 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_17 : @[ActivationBlock.scala 53:43]
        io.activation[17] <= io.weightedSum[17] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_17_T = bits(io.weightedSum[17], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_17_T_1 = bits(_io_activation_17_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_17_T_2 = mux(_io_activation_17_T_1, asSInt(UInt<1>("h00")), io.weightedSum[17]) @[ActivationBlock.scala 56:32]
        io.activation[17] <= _io_activation_17_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[17] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_18 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_18 : @[ActivationBlock.scala 53:43]
        io.activation[18] <= io.weightedSum[18] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_18_T = bits(io.weightedSum[18], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_18_T_1 = bits(_io_activation_18_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_18_T_2 = mux(_io_activation_18_T_1, asSInt(UInt<1>("h00")), io.weightedSum[18]) @[ActivationBlock.scala 56:32]
        io.activation[18] <= _io_activation_18_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[18] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_19 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_19 : @[ActivationBlock.scala 53:43]
        io.activation[19] <= io.weightedSum[19] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_19_T = bits(io.weightedSum[19], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_19_T_1 = bits(_io_activation_19_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_19_T_2 = mux(_io_activation_19_T_1, asSInt(UInt<1>("h00")), io.weightedSum[19]) @[ActivationBlock.scala 56:32]
        io.activation[19] <= _io_activation_19_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[19] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_20 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_20 : @[ActivationBlock.scala 53:43]
        io.activation[20] <= io.weightedSum[20] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_20_T = bits(io.weightedSum[20], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_20_T_1 = bits(_io_activation_20_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_20_T_2 = mux(_io_activation_20_T_1, asSInt(UInt<1>("h00")), io.weightedSum[20]) @[ActivationBlock.scala 56:32]
        io.activation[20] <= _io_activation_20_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[20] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_21 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_21 : @[ActivationBlock.scala 53:43]
        io.activation[21] <= io.weightedSum[21] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_21_T = bits(io.weightedSum[21], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_21_T_1 = bits(_io_activation_21_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_21_T_2 = mux(_io_activation_21_T_1, asSInt(UInt<1>("h00")), io.weightedSum[21]) @[ActivationBlock.scala 56:32]
        io.activation[21] <= _io_activation_21_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[21] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_22 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_22 : @[ActivationBlock.scala 53:43]
        io.activation[22] <= io.weightedSum[22] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_22_T = bits(io.weightedSum[22], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_22_T_1 = bits(_io_activation_22_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_22_T_2 = mux(_io_activation_22_T_1, asSInt(UInt<1>("h00")), io.weightedSum[22]) @[ActivationBlock.scala 56:32]
        io.activation[22] <= _io_activation_22_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[22] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_23 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_23 : @[ActivationBlock.scala 53:43]
        io.activation[23] <= io.weightedSum[23] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_23_T = bits(io.weightedSum[23], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_23_T_1 = bits(_io_activation_23_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_23_T_2 = mux(_io_activation_23_T_1, asSInt(UInt<1>("h00")), io.weightedSum[23]) @[ActivationBlock.scala 56:32]
        io.activation[23] <= _io_activation_23_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[23] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_24 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_24 : @[ActivationBlock.scala 53:43]
        io.activation[24] <= io.weightedSum[24] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_24_T = bits(io.weightedSum[24], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_24_T_1 = bits(_io_activation_24_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_24_T_2 = mux(_io_activation_24_T_1, asSInt(UInt<1>("h00")), io.weightedSum[24]) @[ActivationBlock.scala 56:32]
        io.activation[24] <= _io_activation_24_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[24] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_25 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_25 : @[ActivationBlock.scala 53:43]
        io.activation[25] <= io.weightedSum[25] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_25_T = bits(io.weightedSum[25], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_25_T_1 = bits(_io_activation_25_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_25_T_2 = mux(_io_activation_25_T_1, asSInt(UInt<1>("h00")), io.weightedSum[25]) @[ActivationBlock.scala 56:32]
        io.activation[25] <= _io_activation_25_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[25] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_26 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_26 : @[ActivationBlock.scala 53:43]
        io.activation[26] <= io.weightedSum[26] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_26_T = bits(io.weightedSum[26], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_26_T_1 = bits(_io_activation_26_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_26_T_2 = mux(_io_activation_26_T_1, asSInt(UInt<1>("h00")), io.weightedSum[26]) @[ActivationBlock.scala 56:32]
        io.activation[26] <= _io_activation_26_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[26] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_27 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_27 : @[ActivationBlock.scala 53:43]
        io.activation[27] <= io.weightedSum[27] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_27_T = bits(io.weightedSum[27], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_27_T_1 = bits(_io_activation_27_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_27_T_2 = mux(_io_activation_27_T_1, asSInt(UInt<1>("h00")), io.weightedSum[27]) @[ActivationBlock.scala 56:32]
        io.activation[27] <= _io_activation_27_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[27] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_28 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_28 : @[ActivationBlock.scala 53:43]
        io.activation[28] <= io.weightedSum[28] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_28_T = bits(io.weightedSum[28], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_28_T_1 = bits(_io_activation_28_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_28_T_2 = mux(_io_activation_28_T_1, asSInt(UInt<1>("h00")), io.weightedSum[28]) @[ActivationBlock.scala 56:32]
        io.activation[28] <= _io_activation_28_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[28] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_29 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_29 : @[ActivationBlock.scala 53:43]
        io.activation[29] <= io.weightedSum[29] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_29_T = bits(io.weightedSum[29], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_29_T_1 = bits(_io_activation_29_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_29_T_2 = mux(_io_activation_29_T_1, asSInt(UInt<1>("h00")), io.weightedSum[29]) @[ActivationBlock.scala 56:32]
        io.activation[29] <= _io_activation_29_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[29] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_30 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_30 : @[ActivationBlock.scala 53:43]
        io.activation[30] <= io.weightedSum[30] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_30_T = bits(io.weightedSum[30], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_30_T_1 = bits(_io_activation_30_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_30_T_2 = mux(_io_activation_30_T_1, asSInt(UInt<1>("h00")), io.weightedSum[30]) @[ActivationBlock.scala 56:32]
        io.activation[30] <= _io_activation_30_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[30] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    when io.ena : @[ActivationBlock.scala 52:17]
      node _T_31 = eq(io.activationFunc, UInt<1>("h00")) @[ActivationBlock.scala 53:30]
      when _T_31 : @[ActivationBlock.scala 53:43]
        io.activation[31] <= io.weightedSum[31] @[ActivationBlock.scala 54:26]
        skip @[ActivationBlock.scala 53:43]
      else : @[ActivationBlock.scala 55:18]
        node _io_activation_31_T = bits(io.weightedSum[31], 7, 7) @[ActivationBlock.scala 56:50]
        node _io_activation_31_T_1 = bits(_io_activation_31_T, 0, 0) @[ActivationBlock.scala 56:87]
        node _io_activation_31_T_2 = mux(_io_activation_31_T_1, asSInt(UInt<1>("h00")), io.weightedSum[31]) @[ActivationBlock.scala 56:32]
        io.activation[31] <= _io_activation_31_T_2 @[ActivationBlock.scala 56:26]
        skip @[ActivationBlock.scala 55:18]
      skip @[ActivationBlock.scala 52:17]
    else : @[ActivationBlock.scala 58:16]
      io.activation[31] <= asSInt(UInt<1>("h00")) @[ActivationBlock.scala 59:24]
      skip @[ActivationBlock.scala 58:16]
    io.valid <= io.ena @[ActivationBlock.scala 62:12]
    
  module OneHotEncoder : 
    input clock : Clock
    input reset : Reset
    output io : {flip memRow : UInt<5>, flip enable : UInt<1>, writeSignal : UInt<1>[32]}
    
    node writeSignal = dshl(UInt<1>("h01"), io.memRow) @[utils.scala 85:26]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_0_T = bits(writeSignal, 0, 0) @[utils.scala 88:41]
      node _io_writeSignal_0_T_1 = bits(_io_writeSignal_0_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[0] <= _io_writeSignal_0_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[0] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_1_T = bits(writeSignal, 1, 1) @[utils.scala 88:41]
      node _io_writeSignal_1_T_1 = bits(_io_writeSignal_1_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[1] <= _io_writeSignal_1_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[1] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_2_T = bits(writeSignal, 2, 2) @[utils.scala 88:41]
      node _io_writeSignal_2_T_1 = bits(_io_writeSignal_2_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[2] <= _io_writeSignal_2_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[2] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_3_T = bits(writeSignal, 3, 3) @[utils.scala 88:41]
      node _io_writeSignal_3_T_1 = bits(_io_writeSignal_3_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[3] <= _io_writeSignal_3_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[3] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_4_T = bits(writeSignal, 4, 4) @[utils.scala 88:41]
      node _io_writeSignal_4_T_1 = bits(_io_writeSignal_4_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[4] <= _io_writeSignal_4_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[4] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_5_T = bits(writeSignal, 5, 5) @[utils.scala 88:41]
      node _io_writeSignal_5_T_1 = bits(_io_writeSignal_5_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[5] <= _io_writeSignal_5_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[5] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_6_T = bits(writeSignal, 6, 6) @[utils.scala 88:41]
      node _io_writeSignal_6_T_1 = bits(_io_writeSignal_6_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[6] <= _io_writeSignal_6_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[6] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_7_T = bits(writeSignal, 7, 7) @[utils.scala 88:41]
      node _io_writeSignal_7_T_1 = bits(_io_writeSignal_7_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[7] <= _io_writeSignal_7_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[7] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_8_T = bits(writeSignal, 8, 8) @[utils.scala 88:41]
      node _io_writeSignal_8_T_1 = bits(_io_writeSignal_8_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[8] <= _io_writeSignal_8_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[8] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_9_T = bits(writeSignal, 9, 9) @[utils.scala 88:41]
      node _io_writeSignal_9_T_1 = bits(_io_writeSignal_9_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[9] <= _io_writeSignal_9_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[9] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_10_T = bits(writeSignal, 10, 10) @[utils.scala 88:41]
      node _io_writeSignal_10_T_1 = bits(_io_writeSignal_10_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[10] <= _io_writeSignal_10_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[10] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_11_T = bits(writeSignal, 11, 11) @[utils.scala 88:41]
      node _io_writeSignal_11_T_1 = bits(_io_writeSignal_11_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[11] <= _io_writeSignal_11_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[11] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_12_T = bits(writeSignal, 12, 12) @[utils.scala 88:41]
      node _io_writeSignal_12_T_1 = bits(_io_writeSignal_12_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[12] <= _io_writeSignal_12_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[12] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_13_T = bits(writeSignal, 13, 13) @[utils.scala 88:41]
      node _io_writeSignal_13_T_1 = bits(_io_writeSignal_13_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[13] <= _io_writeSignal_13_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[13] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_14_T = bits(writeSignal, 14, 14) @[utils.scala 88:41]
      node _io_writeSignal_14_T_1 = bits(_io_writeSignal_14_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[14] <= _io_writeSignal_14_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[14] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_15_T = bits(writeSignal, 15, 15) @[utils.scala 88:41]
      node _io_writeSignal_15_T_1 = bits(_io_writeSignal_15_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[15] <= _io_writeSignal_15_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[15] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_16_T = bits(writeSignal, 16, 16) @[utils.scala 88:41]
      node _io_writeSignal_16_T_1 = bits(_io_writeSignal_16_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[16] <= _io_writeSignal_16_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[16] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_17_T = bits(writeSignal, 17, 17) @[utils.scala 88:41]
      node _io_writeSignal_17_T_1 = bits(_io_writeSignal_17_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[17] <= _io_writeSignal_17_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[17] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_18_T = bits(writeSignal, 18, 18) @[utils.scala 88:41]
      node _io_writeSignal_18_T_1 = bits(_io_writeSignal_18_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[18] <= _io_writeSignal_18_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[18] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_19_T = bits(writeSignal, 19, 19) @[utils.scala 88:41]
      node _io_writeSignal_19_T_1 = bits(_io_writeSignal_19_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[19] <= _io_writeSignal_19_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[19] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_20_T = bits(writeSignal, 20, 20) @[utils.scala 88:41]
      node _io_writeSignal_20_T_1 = bits(_io_writeSignal_20_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[20] <= _io_writeSignal_20_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[20] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_21_T = bits(writeSignal, 21, 21) @[utils.scala 88:41]
      node _io_writeSignal_21_T_1 = bits(_io_writeSignal_21_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[21] <= _io_writeSignal_21_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[21] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_22_T = bits(writeSignal, 22, 22) @[utils.scala 88:41]
      node _io_writeSignal_22_T_1 = bits(_io_writeSignal_22_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[22] <= _io_writeSignal_22_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[22] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_23_T = bits(writeSignal, 23, 23) @[utils.scala 88:41]
      node _io_writeSignal_23_T_1 = bits(_io_writeSignal_23_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[23] <= _io_writeSignal_23_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[23] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_24_T = bits(writeSignal, 24, 24) @[utils.scala 88:41]
      node _io_writeSignal_24_T_1 = bits(_io_writeSignal_24_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[24] <= _io_writeSignal_24_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[24] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_25_T = bits(writeSignal, 25, 25) @[utils.scala 88:41]
      node _io_writeSignal_25_T_1 = bits(_io_writeSignal_25_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[25] <= _io_writeSignal_25_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[25] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_26_T = bits(writeSignal, 26, 26) @[utils.scala 88:41]
      node _io_writeSignal_26_T_1 = bits(_io_writeSignal_26_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[26] <= _io_writeSignal_26_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[26] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_27_T = bits(writeSignal, 27, 27) @[utils.scala 88:41]
      node _io_writeSignal_27_T_1 = bits(_io_writeSignal_27_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[27] <= _io_writeSignal_27_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[27] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_28_T = bits(writeSignal, 28, 28) @[utils.scala 88:41]
      node _io_writeSignal_28_T_1 = bits(_io_writeSignal_28_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[28] <= _io_writeSignal_28_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[28] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_29_T = bits(writeSignal, 29, 29) @[utils.scala 88:41]
      node _io_writeSignal_29_T_1 = bits(_io_writeSignal_29_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[29] <= _io_writeSignal_29_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[29] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_30_T = bits(writeSignal, 30, 30) @[utils.scala 88:41]
      node _io_writeSignal_30_T_1 = bits(_io_writeSignal_30_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[30] <= _io_writeSignal_30_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[30] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    when io.enable : @[utils.scala 87:20]
      node _io_writeSignal_31_T = bits(writeSignal, 31, 31) @[utils.scala 88:41]
      node _io_writeSignal_31_T_1 = bits(_io_writeSignal_31_T, 0, 0) @[utils.scala 88:53]
      io.writeSignal[31] <= _io_writeSignal_31_T_1 @[utils.scala 88:27]
      skip @[utils.scala 87:20]
    else : @[utils.scala 89:16]
      io.writeSignal[31] <= UInt<1>("h00") @[utils.scala 90:27]
      skip @[utils.scala 89:16]
    
  module EnableSignalDecoder : 
    input clock : Clock
    input reset : Reset
    output io : {activatedSignals : UInt<1>[32], flip PEs : UInt<5>, flip enable : UInt<1>}
    
    wire activatedSignals : UInt<32>
    activatedSignals <= UInt<32>("h00")
    node _T = eq(io.PEs, UInt<1>("h00")) @[utils.scala 54:18]
    when _T : @[utils.scala 54:33]
      activatedSignals <= UInt<1>("h01") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_1 = eq(io.PEs, UInt<1>("h01")) @[utils.scala 54:18]
    when _T_1 : @[utils.scala 54:33]
      activatedSignals <= UInt<2>("h03") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_2 = eq(io.PEs, UInt<2>("h02")) @[utils.scala 54:18]
    when _T_2 : @[utils.scala 54:33]
      activatedSignals <= UInt<3>("h07") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_3 = eq(io.PEs, UInt<2>("h03")) @[utils.scala 54:18]
    when _T_3 : @[utils.scala 54:33]
      activatedSignals <= UInt<4>("h0f") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_4 = eq(io.PEs, UInt<3>("h04")) @[utils.scala 54:18]
    when _T_4 : @[utils.scala 54:33]
      activatedSignals <= UInt<5>("h01f") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_5 = eq(io.PEs, UInt<3>("h05")) @[utils.scala 54:18]
    when _T_5 : @[utils.scala 54:33]
      activatedSignals <= UInt<6>("h03f") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_6 = eq(io.PEs, UInt<3>("h06")) @[utils.scala 54:18]
    when _T_6 : @[utils.scala 54:33]
      activatedSignals <= UInt<7>("h07f") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_7 = eq(io.PEs, UInt<3>("h07")) @[utils.scala 54:18]
    when _T_7 : @[utils.scala 54:33]
      activatedSignals <= UInt<8>("h0ff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_8 = eq(io.PEs, UInt<4>("h08")) @[utils.scala 54:18]
    when _T_8 : @[utils.scala 54:33]
      activatedSignals <= UInt<9>("h01ff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_9 = eq(io.PEs, UInt<4>("h09")) @[utils.scala 54:18]
    when _T_9 : @[utils.scala 54:33]
      activatedSignals <= UInt<10>("h03ff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_10 = eq(io.PEs, UInt<4>("h0a")) @[utils.scala 54:18]
    when _T_10 : @[utils.scala 54:33]
      activatedSignals <= UInt<11>("h07ff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_11 = eq(io.PEs, UInt<4>("h0b")) @[utils.scala 54:18]
    when _T_11 : @[utils.scala 54:33]
      activatedSignals <= UInt<12>("h0fff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_12 = eq(io.PEs, UInt<4>("h0c")) @[utils.scala 54:18]
    when _T_12 : @[utils.scala 54:33]
      activatedSignals <= UInt<13>("h01fff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_13 = eq(io.PEs, UInt<4>("h0d")) @[utils.scala 54:18]
    when _T_13 : @[utils.scala 54:33]
      activatedSignals <= UInt<14>("h03fff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_14 = eq(io.PEs, UInt<4>("h0e")) @[utils.scala 54:18]
    when _T_14 : @[utils.scala 54:33]
      activatedSignals <= UInt<15>("h07fff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_15 = eq(io.PEs, UInt<4>("h0f")) @[utils.scala 54:18]
    when _T_15 : @[utils.scala 54:33]
      activatedSignals <= UInt<16>("h0ffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_16 = eq(io.PEs, UInt<5>("h010")) @[utils.scala 54:18]
    when _T_16 : @[utils.scala 54:33]
      activatedSignals <= UInt<17>("h01ffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_17 = eq(io.PEs, UInt<5>("h011")) @[utils.scala 54:18]
    when _T_17 : @[utils.scala 54:33]
      activatedSignals <= UInt<18>("h03ffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_18 = eq(io.PEs, UInt<5>("h012")) @[utils.scala 54:18]
    when _T_18 : @[utils.scala 54:33]
      activatedSignals <= UInt<19>("h07ffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_19 = eq(io.PEs, UInt<5>("h013")) @[utils.scala 54:18]
    when _T_19 : @[utils.scala 54:33]
      activatedSignals <= UInt<20>("h0fffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_20 = eq(io.PEs, UInt<5>("h014")) @[utils.scala 54:18]
    when _T_20 : @[utils.scala 54:33]
      activatedSignals <= UInt<21>("h01fffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_21 = eq(io.PEs, UInt<5>("h015")) @[utils.scala 54:18]
    when _T_21 : @[utils.scala 54:33]
      activatedSignals <= UInt<22>("h03fffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_22 = eq(io.PEs, UInt<5>("h016")) @[utils.scala 54:18]
    when _T_22 : @[utils.scala 54:33]
      activatedSignals <= UInt<23>("h07fffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_23 = eq(io.PEs, UInt<5>("h017")) @[utils.scala 54:18]
    when _T_23 : @[utils.scala 54:33]
      activatedSignals <= UInt<24>("h0ffffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_24 = eq(io.PEs, UInt<5>("h018")) @[utils.scala 54:18]
    when _T_24 : @[utils.scala 54:33]
      activatedSignals <= UInt<25>("h01ffffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_25 = eq(io.PEs, UInt<5>("h019")) @[utils.scala 54:18]
    when _T_25 : @[utils.scala 54:33]
      activatedSignals <= UInt<26>("h03ffffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_26 = eq(io.PEs, UInt<5>("h01a")) @[utils.scala 54:18]
    when _T_26 : @[utils.scala 54:33]
      activatedSignals <= UInt<27>("h07ffffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_27 = eq(io.PEs, UInt<5>("h01b")) @[utils.scala 54:18]
    when _T_27 : @[utils.scala 54:33]
      activatedSignals <= UInt<28>("h0fffffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_28 = eq(io.PEs, UInt<5>("h01c")) @[utils.scala 54:18]
    when _T_28 : @[utils.scala 54:33]
      activatedSignals <= UInt<29>("h01fffffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_29 = eq(io.PEs, UInt<5>("h01d")) @[utils.scala 54:18]
    when _T_29 : @[utils.scala 54:33]
      activatedSignals <= UInt<30>("h03fffffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_30 = eq(io.PEs, UInt<5>("h01e")) @[utils.scala 54:18]
    when _T_30 : @[utils.scala 54:33]
      activatedSignals <= UInt<31>("h07fffffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    node _T_31 = eq(io.PEs, UInt<5>("h01f")) @[utils.scala 54:18]
    when _T_31 : @[utils.scala 54:33]
      activatedSignals <= UInt<32>("h0ffffffff") @[utils.scala 55:24]
      skip @[utils.scala 54:33]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_0_T = bits(activatedSignals, 0, 0) @[utils.scala 61:51]
      node _io_activatedSignals_0_T_1 = bits(_io_activatedSignals_0_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[0] <= _io_activatedSignals_0_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[0] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_1_T = bits(activatedSignals, 1, 1) @[utils.scala 61:51]
      node _io_activatedSignals_1_T_1 = bits(_io_activatedSignals_1_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[1] <= _io_activatedSignals_1_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[1] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_2_T = bits(activatedSignals, 2, 2) @[utils.scala 61:51]
      node _io_activatedSignals_2_T_1 = bits(_io_activatedSignals_2_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[2] <= _io_activatedSignals_2_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[2] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_3_T = bits(activatedSignals, 3, 3) @[utils.scala 61:51]
      node _io_activatedSignals_3_T_1 = bits(_io_activatedSignals_3_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[3] <= _io_activatedSignals_3_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[3] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_4_T = bits(activatedSignals, 4, 4) @[utils.scala 61:51]
      node _io_activatedSignals_4_T_1 = bits(_io_activatedSignals_4_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[4] <= _io_activatedSignals_4_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[4] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_5_T = bits(activatedSignals, 5, 5) @[utils.scala 61:51]
      node _io_activatedSignals_5_T_1 = bits(_io_activatedSignals_5_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[5] <= _io_activatedSignals_5_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[5] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_6_T = bits(activatedSignals, 6, 6) @[utils.scala 61:51]
      node _io_activatedSignals_6_T_1 = bits(_io_activatedSignals_6_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[6] <= _io_activatedSignals_6_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[6] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_7_T = bits(activatedSignals, 7, 7) @[utils.scala 61:51]
      node _io_activatedSignals_7_T_1 = bits(_io_activatedSignals_7_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[7] <= _io_activatedSignals_7_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[7] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_8_T = bits(activatedSignals, 8, 8) @[utils.scala 61:51]
      node _io_activatedSignals_8_T_1 = bits(_io_activatedSignals_8_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[8] <= _io_activatedSignals_8_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[8] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_9_T = bits(activatedSignals, 9, 9) @[utils.scala 61:51]
      node _io_activatedSignals_9_T_1 = bits(_io_activatedSignals_9_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[9] <= _io_activatedSignals_9_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[9] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_10_T = bits(activatedSignals, 10, 10) @[utils.scala 61:51]
      node _io_activatedSignals_10_T_1 = bits(_io_activatedSignals_10_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[10] <= _io_activatedSignals_10_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[10] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_11_T = bits(activatedSignals, 11, 11) @[utils.scala 61:51]
      node _io_activatedSignals_11_T_1 = bits(_io_activatedSignals_11_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[11] <= _io_activatedSignals_11_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[11] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_12_T = bits(activatedSignals, 12, 12) @[utils.scala 61:51]
      node _io_activatedSignals_12_T_1 = bits(_io_activatedSignals_12_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[12] <= _io_activatedSignals_12_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[12] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_13_T = bits(activatedSignals, 13, 13) @[utils.scala 61:51]
      node _io_activatedSignals_13_T_1 = bits(_io_activatedSignals_13_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[13] <= _io_activatedSignals_13_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[13] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_14_T = bits(activatedSignals, 14, 14) @[utils.scala 61:51]
      node _io_activatedSignals_14_T_1 = bits(_io_activatedSignals_14_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[14] <= _io_activatedSignals_14_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[14] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_15_T = bits(activatedSignals, 15, 15) @[utils.scala 61:51]
      node _io_activatedSignals_15_T_1 = bits(_io_activatedSignals_15_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[15] <= _io_activatedSignals_15_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[15] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_16_T = bits(activatedSignals, 16, 16) @[utils.scala 61:51]
      node _io_activatedSignals_16_T_1 = bits(_io_activatedSignals_16_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[16] <= _io_activatedSignals_16_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[16] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_17_T = bits(activatedSignals, 17, 17) @[utils.scala 61:51]
      node _io_activatedSignals_17_T_1 = bits(_io_activatedSignals_17_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[17] <= _io_activatedSignals_17_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[17] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_18_T = bits(activatedSignals, 18, 18) @[utils.scala 61:51]
      node _io_activatedSignals_18_T_1 = bits(_io_activatedSignals_18_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[18] <= _io_activatedSignals_18_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[18] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_19_T = bits(activatedSignals, 19, 19) @[utils.scala 61:51]
      node _io_activatedSignals_19_T_1 = bits(_io_activatedSignals_19_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[19] <= _io_activatedSignals_19_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[19] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_20_T = bits(activatedSignals, 20, 20) @[utils.scala 61:51]
      node _io_activatedSignals_20_T_1 = bits(_io_activatedSignals_20_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[20] <= _io_activatedSignals_20_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[20] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_21_T = bits(activatedSignals, 21, 21) @[utils.scala 61:51]
      node _io_activatedSignals_21_T_1 = bits(_io_activatedSignals_21_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[21] <= _io_activatedSignals_21_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[21] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_22_T = bits(activatedSignals, 22, 22) @[utils.scala 61:51]
      node _io_activatedSignals_22_T_1 = bits(_io_activatedSignals_22_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[22] <= _io_activatedSignals_22_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[22] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_23_T = bits(activatedSignals, 23, 23) @[utils.scala 61:51]
      node _io_activatedSignals_23_T_1 = bits(_io_activatedSignals_23_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[23] <= _io_activatedSignals_23_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[23] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_24_T = bits(activatedSignals, 24, 24) @[utils.scala 61:51]
      node _io_activatedSignals_24_T_1 = bits(_io_activatedSignals_24_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[24] <= _io_activatedSignals_24_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[24] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_25_T = bits(activatedSignals, 25, 25) @[utils.scala 61:51]
      node _io_activatedSignals_25_T_1 = bits(_io_activatedSignals_25_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[25] <= _io_activatedSignals_25_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[25] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_26_T = bits(activatedSignals, 26, 26) @[utils.scala 61:51]
      node _io_activatedSignals_26_T_1 = bits(_io_activatedSignals_26_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[26] <= _io_activatedSignals_26_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[26] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_27_T = bits(activatedSignals, 27, 27) @[utils.scala 61:51]
      node _io_activatedSignals_27_T_1 = bits(_io_activatedSignals_27_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[27] <= _io_activatedSignals_27_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[27] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_28_T = bits(activatedSignals, 28, 28) @[utils.scala 61:51]
      node _io_activatedSignals_28_T_1 = bits(_io_activatedSignals_28_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[28] <= _io_activatedSignals_28_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[28] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_29_T = bits(activatedSignals, 29, 29) @[utils.scala 61:51]
      node _io_activatedSignals_29_T_1 = bits(_io_activatedSignals_29_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[29] <= _io_activatedSignals_29_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[29] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_30_T = bits(activatedSignals, 30, 30) @[utils.scala 61:51]
      node _io_activatedSignals_30_T_1 = bits(_io_activatedSignals_30_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[30] <= _io_activatedSignals_30_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[30] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    when io.enable : @[utils.scala 60:20]
      node _io_activatedSignals_31_T = bits(activatedSignals, 31, 31) @[utils.scala 61:51]
      node _io_activatedSignals_31_T_1 = bits(_io_activatedSignals_31_T, 0, 0) @[utils.scala 61:63]
      io.activatedSignals[31] <= _io_activatedSignals_31_T_1 @[utils.scala 61:32]
      skip @[utils.scala 60:20]
    else : @[utils.scala 62:16]
      io.activatedSignals[31] <= UInt<1>("h00") @[utils.scala 63:32]
      skip @[utils.scala 62:16]
    
  module AdderTree : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<16>[32], sum : SInt<16>, sumValid : UInt<1>, flip cal : UInt<1>}
    
    wire registerArray0 : SInt<16>[16] @[AdderTree.scala 14:28]
    wire registerArray1 : SInt<16>[8] @[AdderTree.scala 15:28]
    reg registerArray2 : SInt<16>[4], clock @[AdderTree.scala 16:27]
    wire registerArray3 : SInt<16>[2] @[AdderTree.scala 17:28]
    wire sumRegister : SInt<16> @[AdderTree.scala 18:28]
    node _registerArray0_0_T = add(io.in[0], io.in[1]) @[AdderTree.scala 21:41]
    node _registerArray0_0_T_1 = tail(_registerArray0_0_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_0_T_2 = asSInt(_registerArray0_0_T_1) @[AdderTree.scala 21:41]
    registerArray0[0] <= _registerArray0_0_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_1_T = add(io.in[2], io.in[3]) @[AdderTree.scala 21:41]
    node _registerArray0_1_T_1 = tail(_registerArray0_1_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_1_T_2 = asSInt(_registerArray0_1_T_1) @[AdderTree.scala 21:41]
    registerArray0[1] <= _registerArray0_1_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_2_T = add(io.in[4], io.in[5]) @[AdderTree.scala 21:41]
    node _registerArray0_2_T_1 = tail(_registerArray0_2_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_2_T_2 = asSInt(_registerArray0_2_T_1) @[AdderTree.scala 21:41]
    registerArray0[2] <= _registerArray0_2_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_3_T = add(io.in[6], io.in[7]) @[AdderTree.scala 21:41]
    node _registerArray0_3_T_1 = tail(_registerArray0_3_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_3_T_2 = asSInt(_registerArray0_3_T_1) @[AdderTree.scala 21:41]
    registerArray0[3] <= _registerArray0_3_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_4_T = add(io.in[8], io.in[9]) @[AdderTree.scala 21:41]
    node _registerArray0_4_T_1 = tail(_registerArray0_4_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_4_T_2 = asSInt(_registerArray0_4_T_1) @[AdderTree.scala 21:41]
    registerArray0[4] <= _registerArray0_4_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_5_T = add(io.in[10], io.in[11]) @[AdderTree.scala 21:41]
    node _registerArray0_5_T_1 = tail(_registerArray0_5_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_5_T_2 = asSInt(_registerArray0_5_T_1) @[AdderTree.scala 21:41]
    registerArray0[5] <= _registerArray0_5_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_6_T = add(io.in[12], io.in[13]) @[AdderTree.scala 21:41]
    node _registerArray0_6_T_1 = tail(_registerArray0_6_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_6_T_2 = asSInt(_registerArray0_6_T_1) @[AdderTree.scala 21:41]
    registerArray0[6] <= _registerArray0_6_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_7_T = add(io.in[14], io.in[15]) @[AdderTree.scala 21:41]
    node _registerArray0_7_T_1 = tail(_registerArray0_7_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_7_T_2 = asSInt(_registerArray0_7_T_1) @[AdderTree.scala 21:41]
    registerArray0[7] <= _registerArray0_7_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_8_T = add(io.in[16], io.in[17]) @[AdderTree.scala 21:41]
    node _registerArray0_8_T_1 = tail(_registerArray0_8_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_8_T_2 = asSInt(_registerArray0_8_T_1) @[AdderTree.scala 21:41]
    registerArray0[8] <= _registerArray0_8_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_9_T = add(io.in[18], io.in[19]) @[AdderTree.scala 21:41]
    node _registerArray0_9_T_1 = tail(_registerArray0_9_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_9_T_2 = asSInt(_registerArray0_9_T_1) @[AdderTree.scala 21:41]
    registerArray0[9] <= _registerArray0_9_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_10_T = add(io.in[20], io.in[21]) @[AdderTree.scala 21:41]
    node _registerArray0_10_T_1 = tail(_registerArray0_10_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_10_T_2 = asSInt(_registerArray0_10_T_1) @[AdderTree.scala 21:41]
    registerArray0[10] <= _registerArray0_10_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_11_T = add(io.in[22], io.in[23]) @[AdderTree.scala 21:41]
    node _registerArray0_11_T_1 = tail(_registerArray0_11_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_11_T_2 = asSInt(_registerArray0_11_T_1) @[AdderTree.scala 21:41]
    registerArray0[11] <= _registerArray0_11_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_12_T = add(io.in[24], io.in[25]) @[AdderTree.scala 21:41]
    node _registerArray0_12_T_1 = tail(_registerArray0_12_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_12_T_2 = asSInt(_registerArray0_12_T_1) @[AdderTree.scala 21:41]
    registerArray0[12] <= _registerArray0_12_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_13_T = add(io.in[26], io.in[27]) @[AdderTree.scala 21:41]
    node _registerArray0_13_T_1 = tail(_registerArray0_13_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_13_T_2 = asSInt(_registerArray0_13_T_1) @[AdderTree.scala 21:41]
    registerArray0[13] <= _registerArray0_13_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_14_T = add(io.in[28], io.in[29]) @[AdderTree.scala 21:41]
    node _registerArray0_14_T_1 = tail(_registerArray0_14_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_14_T_2 = asSInt(_registerArray0_14_T_1) @[AdderTree.scala 21:41]
    registerArray0[14] <= _registerArray0_14_T_2 @[AdderTree.scala 21:27]
    node _registerArray0_15_T = add(io.in[30], io.in[31]) @[AdderTree.scala 21:41]
    node _registerArray0_15_T_1 = tail(_registerArray0_15_T, 1) @[AdderTree.scala 21:41]
    node _registerArray0_15_T_2 = asSInt(_registerArray0_15_T_1) @[AdderTree.scala 21:41]
    registerArray0[15] <= _registerArray0_15_T_2 @[AdderTree.scala 21:27]
    node _registerArray1_0_T = add(registerArray0[0], registerArray0[1]) @[AdderTree.scala 25:50]
    node _registerArray1_0_T_1 = tail(_registerArray1_0_T, 1) @[AdderTree.scala 25:50]
    node _registerArray1_0_T_2 = asSInt(_registerArray1_0_T_1) @[AdderTree.scala 25:50]
    registerArray1[0] <= _registerArray1_0_T_2 @[AdderTree.scala 25:27]
    node _registerArray1_1_T = add(registerArray0[2], registerArray0[3]) @[AdderTree.scala 25:50]
    node _registerArray1_1_T_1 = tail(_registerArray1_1_T, 1) @[AdderTree.scala 25:50]
    node _registerArray1_1_T_2 = asSInt(_registerArray1_1_T_1) @[AdderTree.scala 25:50]
    registerArray1[1] <= _registerArray1_1_T_2 @[AdderTree.scala 25:27]
    node _registerArray1_2_T = add(registerArray0[4], registerArray0[5]) @[AdderTree.scala 25:50]
    node _registerArray1_2_T_1 = tail(_registerArray1_2_T, 1) @[AdderTree.scala 25:50]
    node _registerArray1_2_T_2 = asSInt(_registerArray1_2_T_1) @[AdderTree.scala 25:50]
    registerArray1[2] <= _registerArray1_2_T_2 @[AdderTree.scala 25:27]
    node _registerArray1_3_T = add(registerArray0[6], registerArray0[7]) @[AdderTree.scala 25:50]
    node _registerArray1_3_T_1 = tail(_registerArray1_3_T, 1) @[AdderTree.scala 25:50]
    node _registerArray1_3_T_2 = asSInt(_registerArray1_3_T_1) @[AdderTree.scala 25:50]
    registerArray1[3] <= _registerArray1_3_T_2 @[AdderTree.scala 25:27]
    node _registerArray1_4_T = add(registerArray0[8], registerArray0[9]) @[AdderTree.scala 25:50]
    node _registerArray1_4_T_1 = tail(_registerArray1_4_T, 1) @[AdderTree.scala 25:50]
    node _registerArray1_4_T_2 = asSInt(_registerArray1_4_T_1) @[AdderTree.scala 25:50]
    registerArray1[4] <= _registerArray1_4_T_2 @[AdderTree.scala 25:27]
    node _registerArray1_5_T = add(registerArray0[10], registerArray0[11]) @[AdderTree.scala 25:50]
    node _registerArray1_5_T_1 = tail(_registerArray1_5_T, 1) @[AdderTree.scala 25:50]
    node _registerArray1_5_T_2 = asSInt(_registerArray1_5_T_1) @[AdderTree.scala 25:50]
    registerArray1[5] <= _registerArray1_5_T_2 @[AdderTree.scala 25:27]
    node _registerArray1_6_T = add(registerArray0[12], registerArray0[13]) @[AdderTree.scala 25:50]
    node _registerArray1_6_T_1 = tail(_registerArray1_6_T, 1) @[AdderTree.scala 25:50]
    node _registerArray1_6_T_2 = asSInt(_registerArray1_6_T_1) @[AdderTree.scala 25:50]
    registerArray1[6] <= _registerArray1_6_T_2 @[AdderTree.scala 25:27]
    node _registerArray1_7_T = add(registerArray0[14], registerArray0[15]) @[AdderTree.scala 25:50]
    node _registerArray1_7_T_1 = tail(_registerArray1_7_T, 1) @[AdderTree.scala 25:50]
    node _registerArray1_7_T_2 = asSInt(_registerArray1_7_T_1) @[AdderTree.scala 25:50]
    registerArray1[7] <= _registerArray1_7_T_2 @[AdderTree.scala 25:27]
    node _registerArray2_0_T = add(registerArray1[0], registerArray1[1]) @[AdderTree.scala 28:50]
    node _registerArray2_0_T_1 = tail(_registerArray2_0_T, 1) @[AdderTree.scala 28:50]
    node _registerArray2_0_T_2 = asSInt(_registerArray2_0_T_1) @[AdderTree.scala 28:50]
    registerArray2[0] <= _registerArray2_0_T_2 @[AdderTree.scala 28:27]
    node _registerArray2_1_T = add(registerArray1[2], registerArray1[3]) @[AdderTree.scala 28:50]
    node _registerArray2_1_T_1 = tail(_registerArray2_1_T, 1) @[AdderTree.scala 28:50]
    node _registerArray2_1_T_2 = asSInt(_registerArray2_1_T_1) @[AdderTree.scala 28:50]
    registerArray2[1] <= _registerArray2_1_T_2 @[AdderTree.scala 28:27]
    node _registerArray2_2_T = add(registerArray1[4], registerArray1[5]) @[AdderTree.scala 28:50]
    node _registerArray2_2_T_1 = tail(_registerArray2_2_T, 1) @[AdderTree.scala 28:50]
    node _registerArray2_2_T_2 = asSInt(_registerArray2_2_T_1) @[AdderTree.scala 28:50]
    registerArray2[2] <= _registerArray2_2_T_2 @[AdderTree.scala 28:27]
    node _registerArray2_3_T = add(registerArray1[6], registerArray1[7]) @[AdderTree.scala 28:50]
    node _registerArray2_3_T_1 = tail(_registerArray2_3_T, 1) @[AdderTree.scala 28:50]
    node _registerArray2_3_T_2 = asSInt(_registerArray2_3_T_1) @[AdderTree.scala 28:50]
    registerArray2[3] <= _registerArray2_3_T_2 @[AdderTree.scala 28:27]
    node _registerArray3_0_T = add(registerArray2[0], registerArray2[1]) @[AdderTree.scala 31:50]
    node _registerArray3_0_T_1 = tail(_registerArray3_0_T, 1) @[AdderTree.scala 31:50]
    node _registerArray3_0_T_2 = asSInt(_registerArray3_0_T_1) @[AdderTree.scala 31:50]
    registerArray3[0] <= _registerArray3_0_T_2 @[AdderTree.scala 31:27]
    node _registerArray3_1_T = add(registerArray2[2], registerArray2[3]) @[AdderTree.scala 31:50]
    node _registerArray3_1_T_1 = tail(_registerArray3_1_T, 1) @[AdderTree.scala 31:50]
    node _registerArray3_1_T_2 = asSInt(_registerArray3_1_T_1) @[AdderTree.scala 31:50]
    registerArray3[1] <= _registerArray3_1_T_2 @[AdderTree.scala 31:27]
    node _sumRegister_T = add(registerArray3[0], registerArray3[1]) @[AdderTree.scala 33:36]
    node _sumRegister_T_1 = tail(_sumRegister_T, 1) @[AdderTree.scala 33:36]
    node _sumRegister_T_2 = asSInt(_sumRegister_T_1) @[AdderTree.scala 33:36]
    sumRegister <= _sumRegister_T_2 @[AdderTree.scala 33:15]
    reg io_sumValid_REG : UInt<1>, clock @[AdderTree.scala 35:25]
    io_sumValid_REG <= io.cal @[AdderTree.scala 35:25]
    io.sumValid <= io_sumValid_REG @[AdderTree.scala 35:15]
    io.sum <= sumRegister @[AdderTree.scala 36:15]
    
  module Max4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<8>[4], max : SInt<8>, index : UInt<2>}
    
    node _io_max_T = gt(io.in[0], io.in[1]) @[Max.scala 28:46]
    node _io_max_T_1 = mux(_io_max_T, io.in[0], io.in[1]) @[Max.scala 28:43]
    node _io_max_T_2 = gt(_io_max_T_1, io.in[2]) @[Max.scala 28:46]
    node _io_max_T_3 = mux(_io_max_T_2, _io_max_T_1, io.in[2]) @[Max.scala 28:43]
    node _io_max_T_4 = gt(_io_max_T_3, io.in[3]) @[Max.scala 28:46]
    node _io_max_T_5 = mux(_io_max_T_4, _io_max_T_3, io.in[3]) @[Max.scala 28:43]
    io.max <= _io_max_T_5 @[Max.scala 29:12]
    node _io_index_T = gt(io.in[0], io.in[1]) @[Max.scala 28:46]
    node _io_index_T_1 = mux(_io_index_T, io.in[0], io.in[1]) @[Max.scala 28:43]
    node _io_index_T_2 = gt(_io_index_T_1, io.in[2]) @[Max.scala 28:46]
    node _io_index_T_3 = mux(_io_index_T_2, _io_index_T_1, io.in[2]) @[Max.scala 28:43]
    node _io_index_T_4 = gt(_io_index_T_3, io.in[3]) @[Max.scala 28:46]
    node _io_index_T_5 = mux(_io_index_T_4, _io_index_T_3, io.in[3]) @[Max.scala 28:43]
    node _io_index_T_6 = eq(io.in[0], _io_index_T_5) @[Max.scala 30:39]
    node _io_index_T_7 = gt(io.in[0], io.in[1]) @[Max.scala 28:46]
    node _io_index_T_8 = mux(_io_index_T_7, io.in[0], io.in[1]) @[Max.scala 28:43]
    node _io_index_T_9 = gt(_io_index_T_8, io.in[2]) @[Max.scala 28:46]
    node _io_index_T_10 = mux(_io_index_T_9, _io_index_T_8, io.in[2]) @[Max.scala 28:43]
    node _io_index_T_11 = gt(_io_index_T_10, io.in[3]) @[Max.scala 28:46]
    node _io_index_T_12 = mux(_io_index_T_11, _io_index_T_10, io.in[3]) @[Max.scala 28:43]
    node _io_index_T_13 = eq(io.in[1], _io_index_T_12) @[Max.scala 30:39]
    node _io_index_T_14 = gt(io.in[0], io.in[1]) @[Max.scala 28:46]
    node _io_index_T_15 = mux(_io_index_T_14, io.in[0], io.in[1]) @[Max.scala 28:43]
    node _io_index_T_16 = gt(_io_index_T_15, io.in[2]) @[Max.scala 28:46]
    node _io_index_T_17 = mux(_io_index_T_16, _io_index_T_15, io.in[2]) @[Max.scala 28:43]
    node _io_index_T_18 = gt(_io_index_T_17, io.in[3]) @[Max.scala 28:46]
    node _io_index_T_19 = mux(_io_index_T_18, _io_index_T_17, io.in[3]) @[Max.scala 28:43]
    node _io_index_T_20 = eq(io.in[2], _io_index_T_19) @[Max.scala 30:39]
    node _io_index_T_21 = gt(io.in[0], io.in[1]) @[Max.scala 28:46]
    node _io_index_T_22 = mux(_io_index_T_21, io.in[0], io.in[1]) @[Max.scala 28:43]
    node _io_index_T_23 = gt(_io_index_T_22, io.in[2]) @[Max.scala 28:46]
    node _io_index_T_24 = mux(_io_index_T_23, _io_index_T_22, io.in[2]) @[Max.scala 28:43]
    node _io_index_T_25 = gt(_io_index_T_24, io.in[3]) @[Max.scala 28:46]
    node _io_index_T_26 = mux(_io_index_T_25, _io_index_T_24, io.in[3]) @[Max.scala 28:43]
    node _io_index_T_27 = eq(io.in[3], _io_index_T_26) @[Max.scala 30:39]
    node _io_index_T_28 = mux(_io_index_T_20, UInt<2>("h02"), UInt<2>("h03")) @[Max.scala 30:31]
    node _io_index_T_29 = mux(_io_index_T_13, UInt<1>("h01"), _io_index_T_28) @[Max.scala 30:31]
    node _io_index_T_30 = mux(_io_index_T_6, UInt<1>("h00"), _io_index_T_29) @[Max.scala 30:31]
    io.index <= _io_index_T_30 @[Max.scala 30:12]
    
  module DelayBoolNCycles : 
    input clock : Clock
    input reset : Reset
    output io : {flip signal2delay : UInt<1>, delayedSignal : UInt<1>}
    
    reg temp : UInt<1>, clock @[utils.scala 103:21]
    temp <= io.signal2delay @[utils.scala 103:21]
    io.delayedSignal <= temp @[utils.scala 107:20]
    
  module DelayBoolNCycles_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip signal2delay : UInt<1>, delayedSignal : UInt<1>}
    
    reg temp : UInt<1>, clock @[utils.scala 103:21]
    temp <= io.signal2delay @[utils.scala 103:21]
    io.delayedSignal <= temp @[utils.scala 107:20]
    
  module ProcessingCore : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, flip instructionValid : UInt<1>, flip state : UInt<6>, flip terminate : UInt<1>, ready : UInt<1>, jumpIP : UInt<1>, IPAddress : UInt<10>, increaseIP : UInt<1>, action : UInt<2>, actionValid : UInt<1>, dataValid : UInt<1>, dataOut : SInt<8>[32], weightedSum : SInt<8>, weightedSumValid : UInt<1>}
    
    reg instructionRegister : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ProcessingCore.scala 43:36]
    inst DualPortedMem of DualPortedMem @[SRAM.scala 43:79]
    DualPortedMem.clock <= clock
    DualPortedMem.reset <= reset
    inst DualPortedMem_1 of DualPortedMem_1 @[SRAM.scala 43:79]
    DualPortedMem_1.clock <= clock
    DualPortedMem_1.reset <= reset
    inst DualPortedMem_2 of DualPortedMem_2 @[SRAM.scala 43:79]
    DualPortedMem_2.clock <= clock
    DualPortedMem_2.reset <= reset
    inst DualPortedMem_3 of DualPortedMem_3 @[SRAM.scala 43:79]
    DualPortedMem_3.clock <= clock
    DualPortedMem_3.reset <= reset
    inst DualPortedMem_4 of DualPortedMem_4 @[SRAM.scala 43:79]
    DualPortedMem_4.clock <= clock
    DualPortedMem_4.reset <= reset
    inst DualPortedMem_5 of DualPortedMem_5 @[SRAM.scala 43:79]
    DualPortedMem_5.clock <= clock
    DualPortedMem_5.reset <= reset
    inst DualPortedMem_6 of DualPortedMem_6 @[SRAM.scala 43:79]
    DualPortedMem_6.clock <= clock
    DualPortedMem_6.reset <= reset
    inst DualPortedMem_7 of DualPortedMem_7 @[SRAM.scala 43:79]
    DualPortedMem_7.clock <= clock
    DualPortedMem_7.reset <= reset
    inst DualPortedMem_8 of DualPortedMem_8 @[SRAM.scala 43:79]
    DualPortedMem_8.clock <= clock
    DualPortedMem_8.reset <= reset
    inst DualPortedMem_9 of DualPortedMem_9 @[SRAM.scala 43:79]
    DualPortedMem_9.clock <= clock
    DualPortedMem_9.reset <= reset
    inst DualPortedMem_10 of DualPortedMem_10 @[SRAM.scala 43:79]
    DualPortedMem_10.clock <= clock
    DualPortedMem_10.reset <= reset
    inst DualPortedMem_11 of DualPortedMem_11 @[SRAM.scala 43:79]
    DualPortedMem_11.clock <= clock
    DualPortedMem_11.reset <= reset
    inst DualPortedMem_12 of DualPortedMem_12 @[SRAM.scala 43:79]
    DualPortedMem_12.clock <= clock
    DualPortedMem_12.reset <= reset
    inst DualPortedMem_13 of DualPortedMem_13 @[SRAM.scala 43:79]
    DualPortedMem_13.clock <= clock
    DualPortedMem_13.reset <= reset
    inst DualPortedMem_14 of DualPortedMem_14 @[SRAM.scala 43:79]
    DualPortedMem_14.clock <= clock
    DualPortedMem_14.reset <= reset
    inst DualPortedMem_15 of DualPortedMem_15 @[SRAM.scala 43:79]
    DualPortedMem_15.clock <= clock
    DualPortedMem_15.reset <= reset
    inst DualPortedMem_16 of DualPortedMem_16 @[SRAM.scala 43:79]
    DualPortedMem_16.clock <= clock
    DualPortedMem_16.reset <= reset
    inst DualPortedMem_17 of DualPortedMem_17 @[SRAM.scala 43:79]
    DualPortedMem_17.clock <= clock
    DualPortedMem_17.reset <= reset
    inst DualPortedMem_18 of DualPortedMem_18 @[SRAM.scala 43:79]
    DualPortedMem_18.clock <= clock
    DualPortedMem_18.reset <= reset
    inst DualPortedMem_19 of DualPortedMem_19 @[SRAM.scala 43:79]
    DualPortedMem_19.clock <= clock
    DualPortedMem_19.reset <= reset
    inst DualPortedMem_20 of DualPortedMem_20 @[SRAM.scala 43:79]
    DualPortedMem_20.clock <= clock
    DualPortedMem_20.reset <= reset
    inst DualPortedMem_21 of DualPortedMem_21 @[SRAM.scala 43:79]
    DualPortedMem_21.clock <= clock
    DualPortedMem_21.reset <= reset
    inst DualPortedMem_22 of DualPortedMem_22 @[SRAM.scala 43:79]
    DualPortedMem_22.clock <= clock
    DualPortedMem_22.reset <= reset
    inst DualPortedMem_23 of DualPortedMem_23 @[SRAM.scala 43:79]
    DualPortedMem_23.clock <= clock
    DualPortedMem_23.reset <= reset
    inst DualPortedMem_24 of DualPortedMem_24 @[SRAM.scala 43:79]
    DualPortedMem_24.clock <= clock
    DualPortedMem_24.reset <= reset
    inst DualPortedMem_25 of DualPortedMem_25 @[SRAM.scala 43:79]
    DualPortedMem_25.clock <= clock
    DualPortedMem_25.reset <= reset
    inst DualPortedMem_26 of DualPortedMem_26 @[SRAM.scala 43:79]
    DualPortedMem_26.clock <= clock
    DualPortedMem_26.reset <= reset
    inst DualPortedMem_27 of DualPortedMem_27 @[SRAM.scala 43:79]
    DualPortedMem_27.clock <= clock
    DualPortedMem_27.reset <= reset
    inst DualPortedMem_28 of DualPortedMem_28 @[SRAM.scala 43:79]
    DualPortedMem_28.clock <= clock
    DualPortedMem_28.reset <= reset
    inst DualPortedMem_29 of DualPortedMem_29 @[SRAM.scala 43:79]
    DualPortedMem_29.clock <= clock
    DualPortedMem_29.reset <= reset
    inst DualPortedMem_30 of DualPortedMem_30 @[SRAM.scala 43:79]
    DualPortedMem_30.clock <= clock
    DualPortedMem_30.reset <= reset
    inst DualPortedMem_31 of DualPortedMem_31 @[SRAM.scala 43:79]
    DualPortedMem_31.clock <= clock
    DualPortedMem_31.reset <= reset
    inst DualPortedMem_32 of DualPortedMem_32 @[SRAM.scala 43:79]
    DualPortedMem_32.clock <= clock
    DualPortedMem_32.reset <= reset
    inst DualPortedMem_33 of DualPortedMem_33 @[SRAM.scala 43:79]
    DualPortedMem_33.clock <= clock
    DualPortedMem_33.reset <= reset
    inst DualPortedMem_34 of DualPortedMem_34 @[SRAM.scala 43:79]
    DualPortedMem_34.clock <= clock
    DualPortedMem_34.reset <= reset
    inst DualPortedMem_35 of DualPortedMem_35 @[SRAM.scala 43:79]
    DualPortedMem_35.clock <= clock
    DualPortedMem_35.reset <= reset
    inst DualPortedMem_36 of DualPortedMem_36 @[SRAM.scala 43:79]
    DualPortedMem_36.clock <= clock
    DualPortedMem_36.reset <= reset
    inst DualPortedMem_37 of DualPortedMem_37 @[SRAM.scala 43:79]
    DualPortedMem_37.clock <= clock
    DualPortedMem_37.reset <= reset
    inst DualPortedMem_38 of DualPortedMem_38 @[SRAM.scala 43:79]
    DualPortedMem_38.clock <= clock
    DualPortedMem_38.reset <= reset
    inst DualPortedMem_39 of DualPortedMem_39 @[SRAM.scala 43:79]
    DualPortedMem_39.clock <= clock
    DualPortedMem_39.reset <= reset
    inst DualPortedMem_40 of DualPortedMem_40 @[SRAM.scala 43:79]
    DualPortedMem_40.clock <= clock
    DualPortedMem_40.reset <= reset
    inst DualPortedMem_41 of DualPortedMem_41 @[SRAM.scala 43:79]
    DualPortedMem_41.clock <= clock
    DualPortedMem_41.reset <= reset
    inst DualPortedMem_42 of DualPortedMem_42 @[SRAM.scala 43:79]
    DualPortedMem_42.clock <= clock
    DualPortedMem_42.reset <= reset
    inst DualPortedMem_43 of DualPortedMem_43 @[SRAM.scala 43:79]
    DualPortedMem_43.clock <= clock
    DualPortedMem_43.reset <= reset
    inst DualPortedMem_44 of DualPortedMem_44 @[SRAM.scala 43:79]
    DualPortedMem_44.clock <= clock
    DualPortedMem_44.reset <= reset
    inst DualPortedMem_45 of DualPortedMem_45 @[SRAM.scala 43:79]
    DualPortedMem_45.clock <= clock
    DualPortedMem_45.reset <= reset
    inst DualPortedMem_46 of DualPortedMem_46 @[SRAM.scala 43:79]
    DualPortedMem_46.clock <= clock
    DualPortedMem_46.reset <= reset
    inst DualPortedMem_47 of DualPortedMem_47 @[SRAM.scala 43:79]
    DualPortedMem_47.clock <= clock
    DualPortedMem_47.reset <= reset
    inst DualPortedMem_48 of DualPortedMem_48 @[SRAM.scala 43:79]
    DualPortedMem_48.clock <= clock
    DualPortedMem_48.reset <= reset
    inst DualPortedMem_49 of DualPortedMem_49 @[SRAM.scala 43:79]
    DualPortedMem_49.clock <= clock
    DualPortedMem_49.reset <= reset
    inst DualPortedMem_50 of DualPortedMem_50 @[SRAM.scala 43:79]
    DualPortedMem_50.clock <= clock
    DualPortedMem_50.reset <= reset
    inst DualPortedMem_51 of DualPortedMem_51 @[SRAM.scala 43:79]
    DualPortedMem_51.clock <= clock
    DualPortedMem_51.reset <= reset
    inst DualPortedMem_52 of DualPortedMem_52 @[SRAM.scala 43:79]
    DualPortedMem_52.clock <= clock
    DualPortedMem_52.reset <= reset
    inst DualPortedMem_53 of DualPortedMem_53 @[SRAM.scala 43:79]
    DualPortedMem_53.clock <= clock
    DualPortedMem_53.reset <= reset
    inst DualPortedMem_54 of DualPortedMem_54 @[SRAM.scala 43:79]
    DualPortedMem_54.clock <= clock
    DualPortedMem_54.reset <= reset
    inst DualPortedMem_55 of DualPortedMem_55 @[SRAM.scala 43:79]
    DualPortedMem_55.clock <= clock
    DualPortedMem_55.reset <= reset
    inst DualPortedMem_56 of DualPortedMem_56 @[SRAM.scala 43:79]
    DualPortedMem_56.clock <= clock
    DualPortedMem_56.reset <= reset
    inst DualPortedMem_57 of DualPortedMem_57 @[SRAM.scala 43:79]
    DualPortedMem_57.clock <= clock
    DualPortedMem_57.reset <= reset
    inst DualPortedMem_58 of DualPortedMem_58 @[SRAM.scala 43:79]
    DualPortedMem_58.clock <= clock
    DualPortedMem_58.reset <= reset
    inst DualPortedMem_59 of DualPortedMem_59 @[SRAM.scala 43:79]
    DualPortedMem_59.clock <= clock
    DualPortedMem_59.reset <= reset
    inst DualPortedMem_60 of DualPortedMem_60 @[SRAM.scala 43:79]
    DualPortedMem_60.clock <= clock
    DualPortedMem_60.reset <= reset
    inst DualPortedMem_61 of DualPortedMem_61 @[SRAM.scala 43:79]
    DualPortedMem_61.clock <= clock
    DualPortedMem_61.reset <= reset
    inst DualPortedMem_62 of DualPortedMem_62 @[SRAM.scala 43:79]
    DualPortedMem_62.clock <= clock
    DualPortedMem_62.reset <= reset
    inst DualPortedMem_63 of DualPortedMem_63 @[SRAM.scala 43:79]
    DualPortedMem_63.clock <= clock
    DualPortedMem_63.reset <= reset
    inst activationBlock of ActivationBlock @[ActivationBlock.scala 66:70]
    activationBlock.clock <= clock
    activationBlock.reset <= reset
    inst oneHotDecoder of OneHotEncoder @[utils.scala 95:51]
    oneHotDecoder.clock <= clock
    oneHotDecoder.reset <= reset
    inst memReadDecoder of EnableSignalDecoder @[utils.scala 70:53]
    memReadDecoder.clock <= clock
    memReadDecoder.reset <= reset
    inst adderTree of AdderTree @[AdderTree.scala 40:58]
    adderTree.clock <= clock
    adderTree.reset <= reset
    reg mulResults : SInt<16>[32], clock @[ProcessingCore.scala 52:28]
    node _quantizedSum_T = bits(adderTree.io.sum, 11, 3) @[ProcessingCore.scala 53:41]
    node quantizedSum = asSInt(_quantizedSum_T) @[ProcessingCore.scala 53:86]
    inst actionBlock of Max4 @[ProcessingCore.scala 54:31]
    actionBlock.clock <= clock
    actionBlock.reset <= reset
    inst rdDataMatrixValid of DelayBoolNCycles @[utils.scala 111:53]
    rdDataMatrixValid.clock <= clock
    rdDataMatrixValid.reset <= reset
    inst rdDataVecValid of DelayBoolNCycles_1 @[utils.scala 111:53]
    rdDataVecValid.clock <= clock
    rdDataVecValid.reset <= reset
    wire weightRdAddrNode : UInt<6>
    weightRdAddrNode <= UInt<6>("h00")
    wire weightWrAddrNode : UInt<6>
    weightWrAddrNode <= UInt<6>("h00")
    wire _WIRE : SInt<8>
    _WIRE <= asSInt(UInt<8>("h00"))
    wire _WIRE_1 : SInt<8>
    _WIRE_1 <= asSInt(UInt<8>("h00"))
    wire _WIRE_2 : SInt<8>
    _WIRE_2 <= asSInt(UInt<8>("h00"))
    wire _WIRE_3 : SInt<8>
    _WIRE_3 <= asSInt(UInt<8>("h00"))
    wire _WIRE_4 : SInt<8>
    _WIRE_4 <= asSInt(UInt<8>("h00"))
    wire _WIRE_5 : SInt<8>
    _WIRE_5 <= asSInt(UInt<8>("h00"))
    wire _WIRE_6 : SInt<8>
    _WIRE_6 <= asSInt(UInt<8>("h00"))
    wire _WIRE_7 : SInt<8>
    _WIRE_7 <= asSInt(UInt<8>("h00"))
    wire _WIRE_8 : SInt<8>
    _WIRE_8 <= asSInt(UInt<8>("h00"))
    wire _WIRE_9 : SInt<8>
    _WIRE_9 <= asSInt(UInt<8>("h00"))
    wire _WIRE_10 : SInt<8>
    _WIRE_10 <= asSInt(UInt<8>("h00"))
    wire _WIRE_11 : SInt<8>
    _WIRE_11 <= asSInt(UInt<8>("h00"))
    wire _WIRE_12 : SInt<8>
    _WIRE_12 <= asSInt(UInt<8>("h00"))
    wire _WIRE_13 : SInt<8>
    _WIRE_13 <= asSInt(UInt<8>("h00"))
    wire _WIRE_14 : SInt<8>
    _WIRE_14 <= asSInt(UInt<8>("h00"))
    wire _WIRE_15 : SInt<8>
    _WIRE_15 <= asSInt(UInt<8>("h00"))
    wire _WIRE_16 : SInt<8>
    _WIRE_16 <= asSInt(UInt<8>("h00"))
    wire _WIRE_17 : SInt<8>
    _WIRE_17 <= asSInt(UInt<8>("h00"))
    wire _WIRE_18 : SInt<8>
    _WIRE_18 <= asSInt(UInt<8>("h00"))
    wire _WIRE_19 : SInt<8>
    _WIRE_19 <= asSInt(UInt<8>("h00"))
    wire _WIRE_20 : SInt<8>
    _WIRE_20 <= asSInt(UInt<8>("h00"))
    wire _WIRE_21 : SInt<8>
    _WIRE_21 <= asSInt(UInt<8>("h00"))
    wire _WIRE_22 : SInt<8>
    _WIRE_22 <= asSInt(UInt<8>("h00"))
    wire _WIRE_23 : SInt<8>
    _WIRE_23 <= asSInt(UInt<8>("h00"))
    wire _WIRE_24 : SInt<8>
    _WIRE_24 <= asSInt(UInt<8>("h00"))
    wire _WIRE_25 : SInt<8>
    _WIRE_25 <= asSInt(UInt<8>("h00"))
    wire _WIRE_26 : SInt<8>
    _WIRE_26 <= asSInt(UInt<8>("h00"))
    wire _WIRE_27 : SInt<8>
    _WIRE_27 <= asSInt(UInt<8>("h00"))
    wire _WIRE_28 : SInt<8>
    _WIRE_28 <= asSInt(UInt<8>("h00"))
    wire _WIRE_29 : SInt<8>
    _WIRE_29 <= asSInt(UInt<8>("h00"))
    wire _WIRE_30 : SInt<8>
    _WIRE_30 <= asSInt(UInt<8>("h00"))
    wire _WIRE_31 : SInt<8>
    _WIRE_31 <= asSInt(UInt<8>("h00"))
    wire _WIRE_32 : UInt<1>
    _WIRE_32 <= UInt<1>("h00")
    wire _WIRE_33 : UInt<1>
    _WIRE_33 <= UInt<1>("h00")
    wire _WIRE_34 : UInt<1>
    _WIRE_34 <= UInt<1>("h00")
    wire _WIRE_35 : UInt<1>
    _WIRE_35 <= UInt<1>("h00")
    wire _WIRE_36 : UInt<1>
    _WIRE_36 <= UInt<1>("h00")
    wire _WIRE_37 : UInt<1>
    _WIRE_37 <= UInt<1>("h00")
    wire _WIRE_38 : UInt<1>
    _WIRE_38 <= UInt<1>("h00")
    wire _WIRE_39 : UInt<1>
    _WIRE_39 <= UInt<1>("h00")
    wire _WIRE_40 : UInt<1>
    _WIRE_40 <= UInt<1>("h00")
    wire _WIRE_41 : UInt<1>
    _WIRE_41 <= UInt<1>("h00")
    wire _WIRE_42 : UInt<1>
    _WIRE_42 <= UInt<1>("h00")
    wire _WIRE_43 : UInt<1>
    _WIRE_43 <= UInt<1>("h00")
    wire _WIRE_44 : UInt<1>
    _WIRE_44 <= UInt<1>("h00")
    wire _WIRE_45 : UInt<1>
    _WIRE_45 <= UInt<1>("h00")
    wire _WIRE_46 : UInt<1>
    _WIRE_46 <= UInt<1>("h00")
    wire _WIRE_47 : UInt<1>
    _WIRE_47 <= UInt<1>("h00")
    wire _WIRE_48 : UInt<1>
    _WIRE_48 <= UInt<1>("h00")
    wire _WIRE_49 : UInt<1>
    _WIRE_49 <= UInt<1>("h00")
    wire _WIRE_50 : UInt<1>
    _WIRE_50 <= UInt<1>("h00")
    wire _WIRE_51 : UInt<1>
    _WIRE_51 <= UInt<1>("h00")
    wire _WIRE_52 : UInt<1>
    _WIRE_52 <= UInt<1>("h00")
    wire _WIRE_53 : UInt<1>
    _WIRE_53 <= UInt<1>("h00")
    wire _WIRE_54 : UInt<1>
    _WIRE_54 <= UInt<1>("h00")
    wire _WIRE_55 : UInt<1>
    _WIRE_55 <= UInt<1>("h00")
    wire _WIRE_56 : UInt<1>
    _WIRE_56 <= UInt<1>("h00")
    wire _WIRE_57 : UInt<1>
    _WIRE_57 <= UInt<1>("h00")
    wire _WIRE_58 : UInt<1>
    _WIRE_58 <= UInt<1>("h00")
    wire _WIRE_59 : UInt<1>
    _WIRE_59 <= UInt<1>("h00")
    wire _WIRE_60 : UInt<1>
    _WIRE_60 <= UInt<1>("h00")
    wire _WIRE_61 : UInt<1>
    _WIRE_61 <= UInt<1>("h00")
    wire _WIRE_62 : UInt<1>
    _WIRE_62 <= UInt<1>("h00")
    wire _WIRE_63 : UInt<1>
    _WIRE_63 <= UInt<1>("h00")
    wire _WIRE_64 : UInt<1>
    _WIRE_64 <= UInt<1>("h00")
    wire _WIRE_65 : UInt<1>
    _WIRE_65 <= UInt<1>("h00")
    wire _WIRE_66 : UInt<1>
    _WIRE_66 <= UInt<1>("h00")
    wire _WIRE_67 : UInt<1>
    _WIRE_67 <= UInt<1>("h00")
    wire _WIRE_68 : UInt<1>
    _WIRE_68 <= UInt<1>("h00")
    wire _WIRE_69 : UInt<1>
    _WIRE_69 <= UInt<1>("h00")
    wire _WIRE_70 : UInt<1>
    _WIRE_70 <= UInt<1>("h00")
    wire _WIRE_71 : UInt<1>
    _WIRE_71 <= UInt<1>("h00")
    wire _WIRE_72 : UInt<1>
    _WIRE_72 <= UInt<1>("h00")
    wire _WIRE_73 : UInt<1>
    _WIRE_73 <= UInt<1>("h00")
    wire _WIRE_74 : UInt<1>
    _WIRE_74 <= UInt<1>("h00")
    wire _WIRE_75 : UInt<1>
    _WIRE_75 <= UInt<1>("h00")
    wire _WIRE_76 : UInt<1>
    _WIRE_76 <= UInt<1>("h00")
    wire _WIRE_77 : UInt<1>
    _WIRE_77 <= UInt<1>("h00")
    wire _WIRE_78 : UInt<1>
    _WIRE_78 <= UInt<1>("h00")
    wire _WIRE_79 : UInt<1>
    _WIRE_79 <= UInt<1>("h00")
    wire _WIRE_80 : UInt<1>
    _WIRE_80 <= UInt<1>("h00")
    wire _WIRE_81 : UInt<1>
    _WIRE_81 <= UInt<1>("h00")
    wire _WIRE_82 : UInt<1>
    _WIRE_82 <= UInt<1>("h00")
    wire _WIRE_83 : UInt<1>
    _WIRE_83 <= UInt<1>("h00")
    wire _WIRE_84 : UInt<1>
    _WIRE_84 <= UInt<1>("h00")
    wire _WIRE_85 : UInt<1>
    _WIRE_85 <= UInt<1>("h00")
    wire _WIRE_86 : UInt<1>
    _WIRE_86 <= UInt<1>("h00")
    wire _WIRE_87 : UInt<1>
    _WIRE_87 <= UInt<1>("h00")
    wire _WIRE_88 : UInt<1>
    _WIRE_88 <= UInt<1>("h00")
    wire _WIRE_89 : UInt<1>
    _WIRE_89 <= UInt<1>("h00")
    wire _WIRE_90 : UInt<1>
    _WIRE_90 <= UInt<1>("h00")
    wire _WIRE_91 : UInt<1>
    _WIRE_91 <= UInt<1>("h00")
    wire _WIRE_92 : UInt<1>
    _WIRE_92 <= UInt<1>("h00")
    wire _WIRE_93 : UInt<1>
    _WIRE_93 <= UInt<1>("h00")
    wire _WIRE_94 : UInt<1>
    _WIRE_94 <= UInt<1>("h00")
    wire _WIRE_95 : UInt<1>
    _WIRE_95 <= UInt<1>("h00")
    reg rdWrEnaFlip : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ProcessingCore.scala 66:34]
    wire increaseIP : UInt<1>
    increaseIP <= UInt<1>("h00")
    wire jumpIP : UInt<1>
    jumpIP <= UInt<1>("h00")
    wire IPAddress : UInt<10>
    IPAddress <= UInt<10>("h00")
    reg colBanksCounter : UInt<13>, clock with : (reset => (reset, UInt<13>("h00"))) @[ProcessingCore.scala 74:33]
    reg matrixRowCounter : UInt<13>, clock with : (reset => (reset, UInt<13>("h00"))) @[ProcessingCore.scala 75:33]
    reg VinSizeReg : UInt<14>, clock with : (reset => (reset, UInt<14>("h00"))) @[ProcessingCore.scala 76:33]
    reg VoutSizeReg : UInt<13>, clock with : (reset => (reset, UInt<13>("h00"))) @[ProcessingCore.scala 77:33]
    rdDataVecValid.io.signal2delay <= UInt<1>("h00") @[ProcessingCore.scala 80:37]
    rdDataMatrixValid.io.signal2delay <= UInt<1>("h00") @[ProcessingCore.scala 81:37]
    oneHotDecoder.io.enable <= UInt<1>("h00") @[ProcessingCore.scala 82:37]
    memReadDecoder.io.enable <= UInt<1>("h00") @[ProcessingCore.scala 83:37]
    oneHotDecoder.io.memRow <= UInt<1>("h00") @[ProcessingCore.scala 84:37]
    memReadDecoder.io.PEs <= UInt<1>("h00") @[ProcessingCore.scala 85:37]
    activationBlock.io.ena <= UInt<1>("h00") @[ProcessingCore.scala 86:37]
    node _activationBlock_io_activationFunc_T = bits(instructionRegister, 26, 25) @[ProcessingCore.scala 87:59]
    activationBlock.io.activationFunc <= _activationBlock_io_activationFunc_T @[ProcessingCore.scala 87:37]
    reg adderTree_io_cal_REG : UInt<1>, clock @[ProcessingCore.scala 90:30]
    adderTree_io_cal_REG <= rdDataMatrixValid.io.delayedSignal @[ProcessingCore.scala 90:30]
    adderTree.io.cal <= adderTree_io_cal_REG @[ProcessingCore.scala 90:20]
    actionBlock.io.in[0] <= DualPortedMem_32.io.rdData @[ProcessingCore.scala 92:74]
    actionBlock.io.in[1] <= DualPortedMem_33.io.rdData @[ProcessingCore.scala 92:74]
    actionBlock.io.in[2] <= DualPortedMem_34.io.rdData @[ProcessingCore.scala 92:74]
    actionBlock.io.in[3] <= DualPortedMem_35.io.rdData @[ProcessingCore.scala 92:74]
    DualPortedMem.io.wrData <= _WIRE @[ProcessingCore.scala 96:34]
    DualPortedMem.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem.io.rdEna <= _WIRE_64 @[ProcessingCore.scala 99:34]
    DualPortedMem.io.wrEna <= _WIRE_32 @[ProcessingCore.scala 100:34]
    _WIRE_64 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_32.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_32.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_32.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_32.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_32.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[0] <= DualPortedMem_32.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_0_T = mul(DualPortedMem.io.rdData, DualPortedMem_32.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[0] <= _mulResults_0_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[0] <= mulResults[0] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[0] <= DualPortedMem_32.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[0] <= DualPortedMem.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[0] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_1.io.wrData <= _WIRE_1 @[ProcessingCore.scala 96:34]
    DualPortedMem_1.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_1.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_1.io.rdEna <= _WIRE_65 @[ProcessingCore.scala 99:34]
    DualPortedMem_1.io.wrEna <= _WIRE_33 @[ProcessingCore.scala 100:34]
    _WIRE_65 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_33.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_33.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_33.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_33.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_33.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[1] <= DualPortedMem_33.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_1_T = mul(DualPortedMem_1.io.rdData, DualPortedMem_33.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[1] <= _mulResults_1_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[1] <= mulResults[1] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[1] <= DualPortedMem_33.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[1] <= DualPortedMem_1.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[1] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_2.io.wrData <= _WIRE_2 @[ProcessingCore.scala 96:34]
    DualPortedMem_2.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_2.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_2.io.rdEna <= _WIRE_66 @[ProcessingCore.scala 99:34]
    DualPortedMem_2.io.wrEna <= _WIRE_34 @[ProcessingCore.scala 100:34]
    _WIRE_66 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_34.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_34.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_34.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_34.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_34.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[2] <= DualPortedMem_34.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_2_T = mul(DualPortedMem_2.io.rdData, DualPortedMem_34.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[2] <= _mulResults_2_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[2] <= mulResults[2] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[2] <= DualPortedMem_34.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[2] <= DualPortedMem_2.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[2] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_3.io.wrData <= _WIRE_3 @[ProcessingCore.scala 96:34]
    DualPortedMem_3.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_3.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_3.io.rdEna <= _WIRE_67 @[ProcessingCore.scala 99:34]
    DualPortedMem_3.io.wrEna <= _WIRE_35 @[ProcessingCore.scala 100:34]
    _WIRE_67 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_35.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_35.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_35.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_35.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_35.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[3] <= DualPortedMem_35.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_3_T = mul(DualPortedMem_3.io.rdData, DualPortedMem_35.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[3] <= _mulResults_3_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[3] <= mulResults[3] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[3] <= DualPortedMem_35.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[3] <= DualPortedMem_3.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[3] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_4.io.wrData <= _WIRE_4 @[ProcessingCore.scala 96:34]
    DualPortedMem_4.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_4.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_4.io.rdEna <= _WIRE_68 @[ProcessingCore.scala 99:34]
    DualPortedMem_4.io.wrEna <= _WIRE_36 @[ProcessingCore.scala 100:34]
    _WIRE_68 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_36.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_36.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_36.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_36.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_36.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[4] <= DualPortedMem_36.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_4_T = mul(DualPortedMem_4.io.rdData, DualPortedMem_36.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[4] <= _mulResults_4_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[4] <= mulResults[4] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[4] <= DualPortedMem_36.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[4] <= DualPortedMem_4.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[4] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_5.io.wrData <= _WIRE_5 @[ProcessingCore.scala 96:34]
    DualPortedMem_5.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_5.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_5.io.rdEna <= _WIRE_69 @[ProcessingCore.scala 99:34]
    DualPortedMem_5.io.wrEna <= _WIRE_37 @[ProcessingCore.scala 100:34]
    _WIRE_69 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_37.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_37.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_37.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_37.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_37.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[5] <= DualPortedMem_37.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_5_T = mul(DualPortedMem_5.io.rdData, DualPortedMem_37.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[5] <= _mulResults_5_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[5] <= mulResults[5] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[5] <= DualPortedMem_37.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[5] <= DualPortedMem_5.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[5] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_6.io.wrData <= _WIRE_6 @[ProcessingCore.scala 96:34]
    DualPortedMem_6.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_6.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_6.io.rdEna <= _WIRE_70 @[ProcessingCore.scala 99:34]
    DualPortedMem_6.io.wrEna <= _WIRE_38 @[ProcessingCore.scala 100:34]
    _WIRE_70 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_38.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_38.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_38.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_38.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_38.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[6] <= DualPortedMem_38.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_6_T = mul(DualPortedMem_6.io.rdData, DualPortedMem_38.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[6] <= _mulResults_6_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[6] <= mulResults[6] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[6] <= DualPortedMem_38.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[6] <= DualPortedMem_6.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[6] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_7.io.wrData <= _WIRE_7 @[ProcessingCore.scala 96:34]
    DualPortedMem_7.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_7.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_7.io.rdEna <= _WIRE_71 @[ProcessingCore.scala 99:34]
    DualPortedMem_7.io.wrEna <= _WIRE_39 @[ProcessingCore.scala 100:34]
    _WIRE_71 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_39.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_39.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_39.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_39.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_39.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[7] <= DualPortedMem_39.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_7_T = mul(DualPortedMem_7.io.rdData, DualPortedMem_39.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[7] <= _mulResults_7_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[7] <= mulResults[7] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[7] <= DualPortedMem_39.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[7] <= DualPortedMem_7.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[7] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_8.io.wrData <= _WIRE_8 @[ProcessingCore.scala 96:34]
    DualPortedMem_8.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_8.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_8.io.rdEna <= _WIRE_72 @[ProcessingCore.scala 99:34]
    DualPortedMem_8.io.wrEna <= _WIRE_40 @[ProcessingCore.scala 100:34]
    _WIRE_72 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_40.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_40.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_40.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_40.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_40.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[8] <= DualPortedMem_40.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_8_T = mul(DualPortedMem_8.io.rdData, DualPortedMem_40.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[8] <= _mulResults_8_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[8] <= mulResults[8] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[8] <= DualPortedMem_40.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[8] <= DualPortedMem_8.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[8] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_9.io.wrData <= _WIRE_9 @[ProcessingCore.scala 96:34]
    DualPortedMem_9.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_9.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_9.io.rdEna <= _WIRE_73 @[ProcessingCore.scala 99:34]
    DualPortedMem_9.io.wrEna <= _WIRE_41 @[ProcessingCore.scala 100:34]
    _WIRE_73 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_41.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_41.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_41.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_41.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_41.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[9] <= DualPortedMem_41.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_9_T = mul(DualPortedMem_9.io.rdData, DualPortedMem_41.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[9] <= _mulResults_9_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[9] <= mulResults[9] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[9] <= DualPortedMem_41.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[9] <= DualPortedMem_9.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[9] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_10.io.wrData <= _WIRE_10 @[ProcessingCore.scala 96:34]
    DualPortedMem_10.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_10.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_10.io.rdEna <= _WIRE_74 @[ProcessingCore.scala 99:34]
    DualPortedMem_10.io.wrEna <= _WIRE_42 @[ProcessingCore.scala 100:34]
    _WIRE_74 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_42.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_42.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_42.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_42.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_42.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[10] <= DualPortedMem_42.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_10_T = mul(DualPortedMem_10.io.rdData, DualPortedMem_42.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[10] <= _mulResults_10_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[10] <= mulResults[10] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[10] <= DualPortedMem_42.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[10] <= DualPortedMem_10.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[10] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_11.io.wrData <= _WIRE_11 @[ProcessingCore.scala 96:34]
    DualPortedMem_11.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_11.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_11.io.rdEna <= _WIRE_75 @[ProcessingCore.scala 99:34]
    DualPortedMem_11.io.wrEna <= _WIRE_43 @[ProcessingCore.scala 100:34]
    _WIRE_75 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_43.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_43.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_43.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_43.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_43.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[11] <= DualPortedMem_43.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_11_T = mul(DualPortedMem_11.io.rdData, DualPortedMem_43.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[11] <= _mulResults_11_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[11] <= mulResults[11] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[11] <= DualPortedMem_43.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[11] <= DualPortedMem_11.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[11] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_12.io.wrData <= _WIRE_12 @[ProcessingCore.scala 96:34]
    DualPortedMem_12.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_12.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_12.io.rdEna <= _WIRE_76 @[ProcessingCore.scala 99:34]
    DualPortedMem_12.io.wrEna <= _WIRE_44 @[ProcessingCore.scala 100:34]
    _WIRE_76 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_44.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_44.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_44.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_44.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_44.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[12] <= DualPortedMem_44.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_12_T = mul(DualPortedMem_12.io.rdData, DualPortedMem_44.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[12] <= _mulResults_12_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[12] <= mulResults[12] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[12] <= DualPortedMem_44.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[12] <= DualPortedMem_12.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[12] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_13.io.wrData <= _WIRE_13 @[ProcessingCore.scala 96:34]
    DualPortedMem_13.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_13.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_13.io.rdEna <= _WIRE_77 @[ProcessingCore.scala 99:34]
    DualPortedMem_13.io.wrEna <= _WIRE_45 @[ProcessingCore.scala 100:34]
    _WIRE_77 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_45.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_45.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_45.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_45.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_45.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[13] <= DualPortedMem_45.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_13_T = mul(DualPortedMem_13.io.rdData, DualPortedMem_45.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[13] <= _mulResults_13_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[13] <= mulResults[13] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[13] <= DualPortedMem_45.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[13] <= DualPortedMem_13.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[13] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_14.io.wrData <= _WIRE_14 @[ProcessingCore.scala 96:34]
    DualPortedMem_14.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_14.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_14.io.rdEna <= _WIRE_78 @[ProcessingCore.scala 99:34]
    DualPortedMem_14.io.wrEna <= _WIRE_46 @[ProcessingCore.scala 100:34]
    _WIRE_78 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_46.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_46.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_46.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_46.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_46.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[14] <= DualPortedMem_46.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_14_T = mul(DualPortedMem_14.io.rdData, DualPortedMem_46.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[14] <= _mulResults_14_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[14] <= mulResults[14] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[14] <= DualPortedMem_46.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[14] <= DualPortedMem_14.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[14] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_15.io.wrData <= _WIRE_15 @[ProcessingCore.scala 96:34]
    DualPortedMem_15.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_15.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_15.io.rdEna <= _WIRE_79 @[ProcessingCore.scala 99:34]
    DualPortedMem_15.io.wrEna <= _WIRE_47 @[ProcessingCore.scala 100:34]
    _WIRE_79 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_47.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_47.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_47.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_47.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_47.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[15] <= DualPortedMem_47.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_15_T = mul(DualPortedMem_15.io.rdData, DualPortedMem_47.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[15] <= _mulResults_15_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[15] <= mulResults[15] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[15] <= DualPortedMem_47.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[15] <= DualPortedMem_15.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[15] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_16.io.wrData <= _WIRE_16 @[ProcessingCore.scala 96:34]
    DualPortedMem_16.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_16.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_16.io.rdEna <= _WIRE_80 @[ProcessingCore.scala 99:34]
    DualPortedMem_16.io.wrEna <= _WIRE_48 @[ProcessingCore.scala 100:34]
    _WIRE_80 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_48.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_48.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_48.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_48.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_48.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[16] <= DualPortedMem_48.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_16_T = mul(DualPortedMem_16.io.rdData, DualPortedMem_48.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[16] <= _mulResults_16_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[16] <= mulResults[16] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[16] <= DualPortedMem_48.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[16] <= DualPortedMem_16.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[16] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_17.io.wrData <= _WIRE_17 @[ProcessingCore.scala 96:34]
    DualPortedMem_17.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_17.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_17.io.rdEna <= _WIRE_81 @[ProcessingCore.scala 99:34]
    DualPortedMem_17.io.wrEna <= _WIRE_49 @[ProcessingCore.scala 100:34]
    _WIRE_81 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_49.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_49.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_49.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_49.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_49.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[17] <= DualPortedMem_49.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_17_T = mul(DualPortedMem_17.io.rdData, DualPortedMem_49.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[17] <= _mulResults_17_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[17] <= mulResults[17] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[17] <= DualPortedMem_49.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[17] <= DualPortedMem_17.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[17] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_18.io.wrData <= _WIRE_18 @[ProcessingCore.scala 96:34]
    DualPortedMem_18.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_18.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_18.io.rdEna <= _WIRE_82 @[ProcessingCore.scala 99:34]
    DualPortedMem_18.io.wrEna <= _WIRE_50 @[ProcessingCore.scala 100:34]
    _WIRE_82 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_50.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_50.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_50.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_50.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_50.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[18] <= DualPortedMem_50.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_18_T = mul(DualPortedMem_18.io.rdData, DualPortedMem_50.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[18] <= _mulResults_18_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[18] <= mulResults[18] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[18] <= DualPortedMem_50.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[18] <= DualPortedMem_18.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[18] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_19.io.wrData <= _WIRE_19 @[ProcessingCore.scala 96:34]
    DualPortedMem_19.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_19.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_19.io.rdEna <= _WIRE_83 @[ProcessingCore.scala 99:34]
    DualPortedMem_19.io.wrEna <= _WIRE_51 @[ProcessingCore.scala 100:34]
    _WIRE_83 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_51.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_51.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_51.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_51.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_51.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[19] <= DualPortedMem_51.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_19_T = mul(DualPortedMem_19.io.rdData, DualPortedMem_51.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[19] <= _mulResults_19_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[19] <= mulResults[19] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[19] <= DualPortedMem_51.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[19] <= DualPortedMem_19.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[19] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_20.io.wrData <= _WIRE_20 @[ProcessingCore.scala 96:34]
    DualPortedMem_20.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_20.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_20.io.rdEna <= _WIRE_84 @[ProcessingCore.scala 99:34]
    DualPortedMem_20.io.wrEna <= _WIRE_52 @[ProcessingCore.scala 100:34]
    _WIRE_84 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_52.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_52.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_52.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_52.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_52.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[20] <= DualPortedMem_52.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_20_T = mul(DualPortedMem_20.io.rdData, DualPortedMem_52.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[20] <= _mulResults_20_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[20] <= mulResults[20] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[20] <= DualPortedMem_52.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[20] <= DualPortedMem_20.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[20] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_21.io.wrData <= _WIRE_21 @[ProcessingCore.scala 96:34]
    DualPortedMem_21.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_21.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_21.io.rdEna <= _WIRE_85 @[ProcessingCore.scala 99:34]
    DualPortedMem_21.io.wrEna <= _WIRE_53 @[ProcessingCore.scala 100:34]
    _WIRE_85 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_53.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_53.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_53.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_53.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_53.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[21] <= DualPortedMem_53.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_21_T = mul(DualPortedMem_21.io.rdData, DualPortedMem_53.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[21] <= _mulResults_21_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[21] <= mulResults[21] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[21] <= DualPortedMem_53.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[21] <= DualPortedMem_21.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[21] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_22.io.wrData <= _WIRE_22 @[ProcessingCore.scala 96:34]
    DualPortedMem_22.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_22.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_22.io.rdEna <= _WIRE_86 @[ProcessingCore.scala 99:34]
    DualPortedMem_22.io.wrEna <= _WIRE_54 @[ProcessingCore.scala 100:34]
    _WIRE_86 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_54.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_54.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_54.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_54.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_54.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[22] <= DualPortedMem_54.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_22_T = mul(DualPortedMem_22.io.rdData, DualPortedMem_54.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[22] <= _mulResults_22_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[22] <= mulResults[22] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[22] <= DualPortedMem_54.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[22] <= DualPortedMem_22.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[22] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_23.io.wrData <= _WIRE_23 @[ProcessingCore.scala 96:34]
    DualPortedMem_23.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_23.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_23.io.rdEna <= _WIRE_87 @[ProcessingCore.scala 99:34]
    DualPortedMem_23.io.wrEna <= _WIRE_55 @[ProcessingCore.scala 100:34]
    _WIRE_87 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_55.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_55.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_55.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_55.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_55.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[23] <= DualPortedMem_55.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_23_T = mul(DualPortedMem_23.io.rdData, DualPortedMem_55.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[23] <= _mulResults_23_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[23] <= mulResults[23] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[23] <= DualPortedMem_55.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[23] <= DualPortedMem_23.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[23] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_24.io.wrData <= _WIRE_24 @[ProcessingCore.scala 96:34]
    DualPortedMem_24.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_24.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_24.io.rdEna <= _WIRE_88 @[ProcessingCore.scala 99:34]
    DualPortedMem_24.io.wrEna <= _WIRE_56 @[ProcessingCore.scala 100:34]
    _WIRE_88 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_56.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_56.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_56.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_56.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_56.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[24] <= DualPortedMem_56.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_24_T = mul(DualPortedMem_24.io.rdData, DualPortedMem_56.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[24] <= _mulResults_24_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[24] <= mulResults[24] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[24] <= DualPortedMem_56.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[24] <= DualPortedMem_24.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[24] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_25.io.wrData <= _WIRE_25 @[ProcessingCore.scala 96:34]
    DualPortedMem_25.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_25.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_25.io.rdEna <= _WIRE_89 @[ProcessingCore.scala 99:34]
    DualPortedMem_25.io.wrEna <= _WIRE_57 @[ProcessingCore.scala 100:34]
    _WIRE_89 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_57.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_57.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_57.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_57.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_57.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[25] <= DualPortedMem_57.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_25_T = mul(DualPortedMem_25.io.rdData, DualPortedMem_57.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[25] <= _mulResults_25_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[25] <= mulResults[25] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[25] <= DualPortedMem_57.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[25] <= DualPortedMem_25.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[25] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_26.io.wrData <= _WIRE_26 @[ProcessingCore.scala 96:34]
    DualPortedMem_26.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_26.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_26.io.rdEna <= _WIRE_90 @[ProcessingCore.scala 99:34]
    DualPortedMem_26.io.wrEna <= _WIRE_58 @[ProcessingCore.scala 100:34]
    _WIRE_90 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_58.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_58.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_58.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_58.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_58.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[26] <= DualPortedMem_58.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_26_T = mul(DualPortedMem_26.io.rdData, DualPortedMem_58.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[26] <= _mulResults_26_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[26] <= mulResults[26] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[26] <= DualPortedMem_58.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[26] <= DualPortedMem_26.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[26] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_27.io.wrData <= _WIRE_27 @[ProcessingCore.scala 96:34]
    DualPortedMem_27.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_27.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_27.io.rdEna <= _WIRE_91 @[ProcessingCore.scala 99:34]
    DualPortedMem_27.io.wrEna <= _WIRE_59 @[ProcessingCore.scala 100:34]
    _WIRE_91 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_59.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_59.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_59.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_59.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_59.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[27] <= DualPortedMem_59.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_27_T = mul(DualPortedMem_27.io.rdData, DualPortedMem_59.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[27] <= _mulResults_27_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[27] <= mulResults[27] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[27] <= DualPortedMem_59.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[27] <= DualPortedMem_27.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[27] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_28.io.wrData <= _WIRE_28 @[ProcessingCore.scala 96:34]
    DualPortedMem_28.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_28.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_28.io.rdEna <= _WIRE_92 @[ProcessingCore.scala 99:34]
    DualPortedMem_28.io.wrEna <= _WIRE_60 @[ProcessingCore.scala 100:34]
    _WIRE_92 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_60.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_60.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_60.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_60.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_60.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[28] <= DualPortedMem_60.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_28_T = mul(DualPortedMem_28.io.rdData, DualPortedMem_60.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[28] <= _mulResults_28_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[28] <= mulResults[28] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[28] <= DualPortedMem_60.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[28] <= DualPortedMem_28.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[28] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_29.io.wrData <= _WIRE_29 @[ProcessingCore.scala 96:34]
    DualPortedMem_29.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_29.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_29.io.rdEna <= _WIRE_93 @[ProcessingCore.scala 99:34]
    DualPortedMem_29.io.wrEna <= _WIRE_61 @[ProcessingCore.scala 100:34]
    _WIRE_93 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_61.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_61.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_61.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_61.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_61.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[29] <= DualPortedMem_61.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_29_T = mul(DualPortedMem_29.io.rdData, DualPortedMem_61.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[29] <= _mulResults_29_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[29] <= mulResults[29] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[29] <= DualPortedMem_61.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[29] <= DualPortedMem_29.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[29] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_30.io.wrData <= _WIRE_30 @[ProcessingCore.scala 96:34]
    DualPortedMem_30.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_30.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_30.io.rdEna <= _WIRE_94 @[ProcessingCore.scala 99:34]
    DualPortedMem_30.io.wrEna <= _WIRE_62 @[ProcessingCore.scala 100:34]
    _WIRE_94 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_62.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_62.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_62.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_62.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_62.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[30] <= DualPortedMem_62.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_30_T = mul(DualPortedMem_30.io.rdData, DualPortedMem_62.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[30] <= _mulResults_30_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[30] <= mulResults[30] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[30] <= DualPortedMem_62.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[30] <= DualPortedMem_30.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[30] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    DualPortedMem_31.io.wrData <= _WIRE_31 @[ProcessingCore.scala 96:34]
    DualPortedMem_31.io.writeAddr <= weightWrAddrNode @[ProcessingCore.scala 97:34]
    DualPortedMem_31.io.readAddr <= weightRdAddrNode @[ProcessingCore.scala 98:34]
    DualPortedMem_31.io.rdEna <= _WIRE_95 @[ProcessingCore.scala 99:34]
    DualPortedMem_31.io.wrEna <= _WIRE_63 @[ProcessingCore.scala 100:34]
    _WIRE_95 <= UInt<1>("h00") @[ProcessingCore.scala 101:34]
    DualPortedMem_63.io.writeAddr <= UInt<1>("h00") @[ProcessingCore.scala 103:40]
    DualPortedMem_63.io.readAddr <= UInt<1>("h00") @[ProcessingCore.scala 104:40]
    DualPortedMem_63.io.rdEna <= UInt<1>("h00") @[ProcessingCore.scala 105:40]
    DualPortedMem_63.io.wrEna <= UInt<1>("h00") @[ProcessingCore.scala 106:40]
    DualPortedMem_63.io.wrData <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 107:40]
    activationBlock.io.weightedSum[31] <= DualPortedMem_63.io.rdData @[ProcessingCore.scala 108:40]
    node _mulResults_31_T = mul(DualPortedMem_31.io.rdData, DualPortedMem_63.io.rdData) @[ProcessingCore.scala 111:54]
    mulResults[31] <= _mulResults_31_T @[ProcessingCore.scala 111:25]
    adderTree.io.in[31] <= mulResults[31] @[ProcessingCore.scala 112:25]
    when rdDataVecValid.io.delayedSignal : @[ProcessingCore.scala 115:44]
      io.dataOut[31] <= DualPortedMem_63.io.rdData @[ProcessingCore.scala 116:28]
      skip @[ProcessingCore.scala 115:44]
    else : @[ProcessingCore.scala 117:53]
      when rdDataMatrixValid.io.delayedSignal : @[ProcessingCore.scala 117:53]
        io.dataOut[31] <= DualPortedMem_31.io.rdData @[ProcessingCore.scala 118:28]
        skip @[ProcessingCore.scala 117:53]
      else : @[ProcessingCore.scala 119:18]
        io.dataOut[31] <= asSInt(UInt<1>("h00")) @[ProcessingCore.scala 120:28]
        skip @[ProcessingCore.scala 119:18]
    node op = bits(instructionRegister, 31, 30) @[ProcessingCore.scala 127:33]
    node func = bits(instructionRegister, 29, 27) @[ProcessingCore.scala 128:33]
    node cond = bits(instructionRegister, 26, 24) @[ProcessingCore.scala 129:33]
    node matrixCol = bits(instructionRegister, 26, 22) @[ProcessingCore.scala 133:40]
    node matrixRow = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 134:40]
    node _weightValue_T = bits(instructionRegister, 11, 0) @[ProcessingCore.scala 135:40]
    node weightValue = asSInt(_weightValue_T) @[ProcessingCore.scala 135:54]
    node rowVector = bits(instructionRegister, 26, 22) @[ProcessingCore.scala 137:40]
    node colVector = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 138:40]
    node _activation_T = bits(instructionRegister, 11, 0) @[ProcessingCore.scala 139:40]
    node activation = asSInt(_activation_T) @[ProcessingCore.scala 139:54]
    node VinSize = bits(instructionRegister, 26, 13) @[ProcessingCore.scala 141:40]
    node VoutSize = bits(instructionRegister, 12, 0) @[ProcessingCore.scala 142:40]
    node MinAddr = bits(instructionRegister, 23, 12) @[ProcessingCore.scala 146:37]
    node VinAddr = bits(instructionRegister, 11, 7) @[ProcessingCore.scala 147:37]
    node VoutAddr = bits(instructionRegister, 6, 0) @[ProcessingCore.scala 148:37]
    node activationType = bits(instructionRegister, 26, 24) @[ProcessingCore.scala 155:43]
    node vinAddr = bits(instructionRegister, 24, 15) @[ProcessingCore.scala 156:43]
    node vinSize = bits(instructionRegister, 14, 10) @[ProcessingCore.scala 157:43]
    reg Controller : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ProcessingCore.scala 161:32]
    wire instructionDone : UInt<1>
    instructionDone <= UInt<1>("h00")
    node _T = eq(UInt<2>("h00"), Controller) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 167:25]
      when io.instructionValid : @[ProcessingCore.scala 168:32]
        Controller <= UInt<2>("h01") @[ProcessingCore.scala 169:25]
        skip @[ProcessingCore.scala 168:32]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), Controller) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        Controller <= UInt<2>("h02") @[ProcessingCore.scala 173:25]
        instructionDone <= UInt<1>("h00") @[ProcessingCore.scala 174:25]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), Controller) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          Controller <= UInt<2>("h03") @[ProcessingCore.scala 177:25]
          instructionDone <= UInt<1>("h00") @[ProcessingCore.scala 178:25]
          node _T_3 = eq(op, UInt<2>("h03")) @[ProcessingCore.scala 179:15]
          when _T_3 : @[ProcessingCore.scala 179:25]
            increaseIP <= UInt<1>("h00") @[ProcessingCore.scala 180:25]
            skip @[ProcessingCore.scala 179:25]
          else : @[ProcessingCore.scala 181:18]
            increaseIP <= UInt<1>("h01") @[ProcessingCore.scala 182:25]
            skip @[ProcessingCore.scala 181:18]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<2>("h03"), Controller) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            when instructionDone : @[ProcessingCore.scala 186:28]
              when io.instructionValid : @[ProcessingCore.scala 187:34]
                Controller <= UInt<2>("h01") @[ProcessingCore.scala 188:25]
                skip @[ProcessingCore.scala 187:34]
              else : @[ProcessingCore.scala 189:20]
                Controller <= UInt<2>("h00") @[ProcessingCore.scala 190:25]
                skip @[ProcessingCore.scala 189:20]
              skip @[ProcessingCore.scala 186:28]
            skip @[Conditional.scala 39:67]
    node _T_5 = eq(Controller, UInt<2>("h01")) @[ProcessingCore.scala 196:19]
    when _T_5 : @[ProcessingCore.scala 196:29]
      instructionRegister <= io.instruction @[ProcessingCore.scala 197:25]
      skip @[ProcessingCore.scala 196:29]
    node _T_6 = eq(Controller, UInt<2>("h02")) @[ProcessingCore.scala 199:19]
    when _T_6 : @[ProcessingCore.scala 199:30]
      node _T_7 = eq(func, UInt<1>("h00")) @[ProcessingCore.scala 200:15]
      when _T_7 : @[ProcessingCore.scala 200:25]
        colBanksCounter <= UInt<1>("h00") @[ProcessingCore.scala 201:25]
        matrixRowCounter <= UInt<1>("h00") @[ProcessingCore.scala 202:25]
        skip @[ProcessingCore.scala 200:25]
      skip @[ProcessingCore.scala 199:30]
    node _T_8 = eq(Controller, UInt<2>("h03")) @[ProcessingCore.scala 207:19]
    when _T_8 : @[ProcessingCore.scala 207:33]
      node _T_9 = eq(op, UInt<1>("h01")) @[ProcessingCore.scala 209:13]
      when _T_9 : @[ProcessingCore.scala 209:44]
        node _T_10 = eq(UInt<1>("h00"), func) @[Conditional.scala 37:30]
        when _T_10 : @[Conditional.scala 40:58]
          VinSizeReg <= VinSize @[ProcessingCore.scala 213:27]
          VoutSizeReg <= VoutSize @[ProcessingCore.scala 214:27]
          instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 215:27]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_11 = eq(UInt<1>("h01"), func) @[Conditional.scala 37:30]
          when _T_11 : @[Conditional.scala 39:67]
            oneHotDecoder.io.enable <= UInt<1>("h01") @[ProcessingCore.scala 219:35]
            oneHotDecoder.io.memRow <= matrixCol @[ProcessingCore.scala 220:35]
            weightWrAddrNode <= matrixRow @[ProcessingCore.scala 221:35]
            instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 222:35]
            _WIRE <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_32 <= oneHotDecoder.io.writeSignal[0] @[ProcessingCore.scala 225:33]
            _WIRE_1 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_33 <= oneHotDecoder.io.writeSignal[1] @[ProcessingCore.scala 225:33]
            _WIRE_2 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_34 <= oneHotDecoder.io.writeSignal[2] @[ProcessingCore.scala 225:33]
            _WIRE_3 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_35 <= oneHotDecoder.io.writeSignal[3] @[ProcessingCore.scala 225:33]
            _WIRE_4 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_36 <= oneHotDecoder.io.writeSignal[4] @[ProcessingCore.scala 225:33]
            _WIRE_5 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_37 <= oneHotDecoder.io.writeSignal[5] @[ProcessingCore.scala 225:33]
            _WIRE_6 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_38 <= oneHotDecoder.io.writeSignal[6] @[ProcessingCore.scala 225:33]
            _WIRE_7 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_39 <= oneHotDecoder.io.writeSignal[7] @[ProcessingCore.scala 225:33]
            _WIRE_8 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_40 <= oneHotDecoder.io.writeSignal[8] @[ProcessingCore.scala 225:33]
            _WIRE_9 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_41 <= oneHotDecoder.io.writeSignal[9] @[ProcessingCore.scala 225:33]
            _WIRE_10 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_42 <= oneHotDecoder.io.writeSignal[10] @[ProcessingCore.scala 225:33]
            _WIRE_11 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_43 <= oneHotDecoder.io.writeSignal[11] @[ProcessingCore.scala 225:33]
            _WIRE_12 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_44 <= oneHotDecoder.io.writeSignal[12] @[ProcessingCore.scala 225:33]
            _WIRE_13 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_45 <= oneHotDecoder.io.writeSignal[13] @[ProcessingCore.scala 225:33]
            _WIRE_14 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_46 <= oneHotDecoder.io.writeSignal[14] @[ProcessingCore.scala 225:33]
            _WIRE_15 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_47 <= oneHotDecoder.io.writeSignal[15] @[ProcessingCore.scala 225:33]
            _WIRE_16 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_48 <= oneHotDecoder.io.writeSignal[16] @[ProcessingCore.scala 225:33]
            _WIRE_17 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_49 <= oneHotDecoder.io.writeSignal[17] @[ProcessingCore.scala 225:33]
            _WIRE_18 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_50 <= oneHotDecoder.io.writeSignal[18] @[ProcessingCore.scala 225:33]
            _WIRE_19 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_51 <= oneHotDecoder.io.writeSignal[19] @[ProcessingCore.scala 225:33]
            _WIRE_20 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_52 <= oneHotDecoder.io.writeSignal[20] @[ProcessingCore.scala 225:33]
            _WIRE_21 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_53 <= oneHotDecoder.io.writeSignal[21] @[ProcessingCore.scala 225:33]
            _WIRE_22 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_54 <= oneHotDecoder.io.writeSignal[22] @[ProcessingCore.scala 225:33]
            _WIRE_23 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_55 <= oneHotDecoder.io.writeSignal[23] @[ProcessingCore.scala 225:33]
            _WIRE_24 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_56 <= oneHotDecoder.io.writeSignal[24] @[ProcessingCore.scala 225:33]
            _WIRE_25 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_57 <= oneHotDecoder.io.writeSignal[25] @[ProcessingCore.scala 225:33]
            _WIRE_26 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_58 <= oneHotDecoder.io.writeSignal[26] @[ProcessingCore.scala 225:33]
            _WIRE_27 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_59 <= oneHotDecoder.io.writeSignal[27] @[ProcessingCore.scala 225:33]
            _WIRE_28 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_60 <= oneHotDecoder.io.writeSignal[28] @[ProcessingCore.scala 225:33]
            _WIRE_29 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_61 <= oneHotDecoder.io.writeSignal[29] @[ProcessingCore.scala 225:33]
            _WIRE_30 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_62 <= oneHotDecoder.io.writeSignal[30] @[ProcessingCore.scala 225:33]
            _WIRE_31 <= weightValue @[ProcessingCore.scala 224:33]
            _WIRE_63 <= oneHotDecoder.io.writeSignal[31] @[ProcessingCore.scala 225:33]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<2>("h02"), func) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              memReadDecoder.io.enable <= UInt<1>("h01") @[ProcessingCore.scala 232:36]
              memReadDecoder.io.PEs <= io.state @[ProcessingCore.scala 233:36]
              oneHotDecoder.io.enable <= UInt<1>("h01") @[ProcessingCore.scala 234:36]
              oneHotDecoder.io.memRow <= io.state @[ProcessingCore.scala 235:36]
              DualPortedMem_32.io.wrEna <= memReadDecoder.io.activatedSignals[0] @[ProcessingCore.scala 237:49]
              node _T_13 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_32.io.writeAddr <= _T_13 @[ProcessingCore.scala 238:49]
              node _T_14 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[0]) @[Cat.scala 30:58]
              node _T_15 = shl(_T_14, 3) @[ProcessingCore.scala 239:105]
              node _T_16 = asSInt(_T_15) @[ProcessingCore.scala 239:126]
              DualPortedMem_32.io.wrData <= _T_16 @[ProcessingCore.scala 239:49]
              DualPortedMem_33.io.wrEna <= memReadDecoder.io.activatedSignals[1] @[ProcessingCore.scala 237:49]
              node _T_17 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_33.io.writeAddr <= _T_17 @[ProcessingCore.scala 238:49]
              node _T_18 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[1]) @[Cat.scala 30:58]
              node _T_19 = shl(_T_18, 3) @[ProcessingCore.scala 239:105]
              node _T_20 = asSInt(_T_19) @[ProcessingCore.scala 239:126]
              DualPortedMem_33.io.wrData <= _T_20 @[ProcessingCore.scala 239:49]
              DualPortedMem_34.io.wrEna <= memReadDecoder.io.activatedSignals[2] @[ProcessingCore.scala 237:49]
              node _T_21 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_34.io.writeAddr <= _T_21 @[ProcessingCore.scala 238:49]
              node _T_22 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[2]) @[Cat.scala 30:58]
              node _T_23 = shl(_T_22, 3) @[ProcessingCore.scala 239:105]
              node _T_24 = asSInt(_T_23) @[ProcessingCore.scala 239:126]
              DualPortedMem_34.io.wrData <= _T_24 @[ProcessingCore.scala 239:49]
              DualPortedMem_35.io.wrEna <= memReadDecoder.io.activatedSignals[3] @[ProcessingCore.scala 237:49]
              node _T_25 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_35.io.writeAddr <= _T_25 @[ProcessingCore.scala 238:49]
              node _T_26 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[3]) @[Cat.scala 30:58]
              node _T_27 = shl(_T_26, 3) @[ProcessingCore.scala 239:105]
              node _T_28 = asSInt(_T_27) @[ProcessingCore.scala 239:126]
              DualPortedMem_35.io.wrData <= _T_28 @[ProcessingCore.scala 239:49]
              DualPortedMem_36.io.wrEna <= memReadDecoder.io.activatedSignals[4] @[ProcessingCore.scala 237:49]
              node _T_29 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_36.io.writeAddr <= _T_29 @[ProcessingCore.scala 238:49]
              node _T_30 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[4]) @[Cat.scala 30:58]
              node _T_31 = shl(_T_30, 3) @[ProcessingCore.scala 239:105]
              node _T_32 = asSInt(_T_31) @[ProcessingCore.scala 239:126]
              DualPortedMem_36.io.wrData <= _T_32 @[ProcessingCore.scala 239:49]
              DualPortedMem_37.io.wrEna <= memReadDecoder.io.activatedSignals[5] @[ProcessingCore.scala 237:49]
              node _T_33 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_37.io.writeAddr <= _T_33 @[ProcessingCore.scala 238:49]
              node _T_34 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[5]) @[Cat.scala 30:58]
              node _T_35 = shl(_T_34, 3) @[ProcessingCore.scala 239:105]
              node _T_36 = asSInt(_T_35) @[ProcessingCore.scala 239:126]
              DualPortedMem_37.io.wrData <= _T_36 @[ProcessingCore.scala 239:49]
              DualPortedMem_38.io.wrEna <= memReadDecoder.io.activatedSignals[6] @[ProcessingCore.scala 237:49]
              node _T_37 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_38.io.writeAddr <= _T_37 @[ProcessingCore.scala 238:49]
              node _T_38 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[6]) @[Cat.scala 30:58]
              node _T_39 = shl(_T_38, 3) @[ProcessingCore.scala 239:105]
              node _T_40 = asSInt(_T_39) @[ProcessingCore.scala 239:126]
              DualPortedMem_38.io.wrData <= _T_40 @[ProcessingCore.scala 239:49]
              DualPortedMem_39.io.wrEna <= memReadDecoder.io.activatedSignals[7] @[ProcessingCore.scala 237:49]
              node _T_41 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_39.io.writeAddr <= _T_41 @[ProcessingCore.scala 238:49]
              node _T_42 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[7]) @[Cat.scala 30:58]
              node _T_43 = shl(_T_42, 3) @[ProcessingCore.scala 239:105]
              node _T_44 = asSInt(_T_43) @[ProcessingCore.scala 239:126]
              DualPortedMem_39.io.wrData <= _T_44 @[ProcessingCore.scala 239:49]
              DualPortedMem_40.io.wrEna <= memReadDecoder.io.activatedSignals[8] @[ProcessingCore.scala 237:49]
              node _T_45 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_40.io.writeAddr <= _T_45 @[ProcessingCore.scala 238:49]
              node _T_46 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[8]) @[Cat.scala 30:58]
              node _T_47 = shl(_T_46, 3) @[ProcessingCore.scala 239:105]
              node _T_48 = asSInt(_T_47) @[ProcessingCore.scala 239:126]
              DualPortedMem_40.io.wrData <= _T_48 @[ProcessingCore.scala 239:49]
              DualPortedMem_41.io.wrEna <= memReadDecoder.io.activatedSignals[9] @[ProcessingCore.scala 237:49]
              node _T_49 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_41.io.writeAddr <= _T_49 @[ProcessingCore.scala 238:49]
              node _T_50 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[9]) @[Cat.scala 30:58]
              node _T_51 = shl(_T_50, 3) @[ProcessingCore.scala 239:105]
              node _T_52 = asSInt(_T_51) @[ProcessingCore.scala 239:126]
              DualPortedMem_41.io.wrData <= _T_52 @[ProcessingCore.scala 239:49]
              DualPortedMem_42.io.wrEna <= memReadDecoder.io.activatedSignals[10] @[ProcessingCore.scala 237:49]
              node _T_53 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_42.io.writeAddr <= _T_53 @[ProcessingCore.scala 238:49]
              node _T_54 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[10]) @[Cat.scala 30:58]
              node _T_55 = shl(_T_54, 3) @[ProcessingCore.scala 239:105]
              node _T_56 = asSInt(_T_55) @[ProcessingCore.scala 239:126]
              DualPortedMem_42.io.wrData <= _T_56 @[ProcessingCore.scala 239:49]
              DualPortedMem_43.io.wrEna <= memReadDecoder.io.activatedSignals[11] @[ProcessingCore.scala 237:49]
              node _T_57 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_43.io.writeAddr <= _T_57 @[ProcessingCore.scala 238:49]
              node _T_58 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[11]) @[Cat.scala 30:58]
              node _T_59 = shl(_T_58, 3) @[ProcessingCore.scala 239:105]
              node _T_60 = asSInt(_T_59) @[ProcessingCore.scala 239:126]
              DualPortedMem_43.io.wrData <= _T_60 @[ProcessingCore.scala 239:49]
              DualPortedMem_44.io.wrEna <= memReadDecoder.io.activatedSignals[12] @[ProcessingCore.scala 237:49]
              node _T_61 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_44.io.writeAddr <= _T_61 @[ProcessingCore.scala 238:49]
              node _T_62 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[12]) @[Cat.scala 30:58]
              node _T_63 = shl(_T_62, 3) @[ProcessingCore.scala 239:105]
              node _T_64 = asSInt(_T_63) @[ProcessingCore.scala 239:126]
              DualPortedMem_44.io.wrData <= _T_64 @[ProcessingCore.scala 239:49]
              DualPortedMem_45.io.wrEna <= memReadDecoder.io.activatedSignals[13] @[ProcessingCore.scala 237:49]
              node _T_65 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_45.io.writeAddr <= _T_65 @[ProcessingCore.scala 238:49]
              node _T_66 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[13]) @[Cat.scala 30:58]
              node _T_67 = shl(_T_66, 3) @[ProcessingCore.scala 239:105]
              node _T_68 = asSInt(_T_67) @[ProcessingCore.scala 239:126]
              DualPortedMem_45.io.wrData <= _T_68 @[ProcessingCore.scala 239:49]
              DualPortedMem_46.io.wrEna <= memReadDecoder.io.activatedSignals[14] @[ProcessingCore.scala 237:49]
              node _T_69 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_46.io.writeAddr <= _T_69 @[ProcessingCore.scala 238:49]
              node _T_70 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[14]) @[Cat.scala 30:58]
              node _T_71 = shl(_T_70, 3) @[ProcessingCore.scala 239:105]
              node _T_72 = asSInt(_T_71) @[ProcessingCore.scala 239:126]
              DualPortedMem_46.io.wrData <= _T_72 @[ProcessingCore.scala 239:49]
              DualPortedMem_47.io.wrEna <= memReadDecoder.io.activatedSignals[15] @[ProcessingCore.scala 237:49]
              node _T_73 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_47.io.writeAddr <= _T_73 @[ProcessingCore.scala 238:49]
              node _T_74 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[15]) @[Cat.scala 30:58]
              node _T_75 = shl(_T_74, 3) @[ProcessingCore.scala 239:105]
              node _T_76 = asSInt(_T_75) @[ProcessingCore.scala 239:126]
              DualPortedMem_47.io.wrData <= _T_76 @[ProcessingCore.scala 239:49]
              DualPortedMem_48.io.wrEna <= memReadDecoder.io.activatedSignals[16] @[ProcessingCore.scala 237:49]
              node _T_77 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_48.io.writeAddr <= _T_77 @[ProcessingCore.scala 238:49]
              node _T_78 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[16]) @[Cat.scala 30:58]
              node _T_79 = shl(_T_78, 3) @[ProcessingCore.scala 239:105]
              node _T_80 = asSInt(_T_79) @[ProcessingCore.scala 239:126]
              DualPortedMem_48.io.wrData <= _T_80 @[ProcessingCore.scala 239:49]
              DualPortedMem_49.io.wrEna <= memReadDecoder.io.activatedSignals[17] @[ProcessingCore.scala 237:49]
              node _T_81 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_49.io.writeAddr <= _T_81 @[ProcessingCore.scala 238:49]
              node _T_82 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[17]) @[Cat.scala 30:58]
              node _T_83 = shl(_T_82, 3) @[ProcessingCore.scala 239:105]
              node _T_84 = asSInt(_T_83) @[ProcessingCore.scala 239:126]
              DualPortedMem_49.io.wrData <= _T_84 @[ProcessingCore.scala 239:49]
              DualPortedMem_50.io.wrEna <= memReadDecoder.io.activatedSignals[18] @[ProcessingCore.scala 237:49]
              node _T_85 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_50.io.writeAddr <= _T_85 @[ProcessingCore.scala 238:49]
              node _T_86 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[18]) @[Cat.scala 30:58]
              node _T_87 = shl(_T_86, 3) @[ProcessingCore.scala 239:105]
              node _T_88 = asSInt(_T_87) @[ProcessingCore.scala 239:126]
              DualPortedMem_50.io.wrData <= _T_88 @[ProcessingCore.scala 239:49]
              DualPortedMem_51.io.wrEna <= memReadDecoder.io.activatedSignals[19] @[ProcessingCore.scala 237:49]
              node _T_89 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_51.io.writeAddr <= _T_89 @[ProcessingCore.scala 238:49]
              node _T_90 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[19]) @[Cat.scala 30:58]
              node _T_91 = shl(_T_90, 3) @[ProcessingCore.scala 239:105]
              node _T_92 = asSInt(_T_91) @[ProcessingCore.scala 239:126]
              DualPortedMem_51.io.wrData <= _T_92 @[ProcessingCore.scala 239:49]
              DualPortedMem_52.io.wrEna <= memReadDecoder.io.activatedSignals[20] @[ProcessingCore.scala 237:49]
              node _T_93 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_52.io.writeAddr <= _T_93 @[ProcessingCore.scala 238:49]
              node _T_94 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[20]) @[Cat.scala 30:58]
              node _T_95 = shl(_T_94, 3) @[ProcessingCore.scala 239:105]
              node _T_96 = asSInt(_T_95) @[ProcessingCore.scala 239:126]
              DualPortedMem_52.io.wrData <= _T_96 @[ProcessingCore.scala 239:49]
              DualPortedMem_53.io.wrEna <= memReadDecoder.io.activatedSignals[21] @[ProcessingCore.scala 237:49]
              node _T_97 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_53.io.writeAddr <= _T_97 @[ProcessingCore.scala 238:49]
              node _T_98 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[21]) @[Cat.scala 30:58]
              node _T_99 = shl(_T_98, 3) @[ProcessingCore.scala 239:105]
              node _T_100 = asSInt(_T_99) @[ProcessingCore.scala 239:126]
              DualPortedMem_53.io.wrData <= _T_100 @[ProcessingCore.scala 239:49]
              DualPortedMem_54.io.wrEna <= memReadDecoder.io.activatedSignals[22] @[ProcessingCore.scala 237:49]
              node _T_101 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_54.io.writeAddr <= _T_101 @[ProcessingCore.scala 238:49]
              node _T_102 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[22]) @[Cat.scala 30:58]
              node _T_103 = shl(_T_102, 3) @[ProcessingCore.scala 239:105]
              node _T_104 = asSInt(_T_103) @[ProcessingCore.scala 239:126]
              DualPortedMem_54.io.wrData <= _T_104 @[ProcessingCore.scala 239:49]
              DualPortedMem_55.io.wrEna <= memReadDecoder.io.activatedSignals[23] @[ProcessingCore.scala 237:49]
              node _T_105 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_55.io.writeAddr <= _T_105 @[ProcessingCore.scala 238:49]
              node _T_106 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[23]) @[Cat.scala 30:58]
              node _T_107 = shl(_T_106, 3) @[ProcessingCore.scala 239:105]
              node _T_108 = asSInt(_T_107) @[ProcessingCore.scala 239:126]
              DualPortedMem_55.io.wrData <= _T_108 @[ProcessingCore.scala 239:49]
              DualPortedMem_56.io.wrEna <= memReadDecoder.io.activatedSignals[24] @[ProcessingCore.scala 237:49]
              node _T_109 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_56.io.writeAddr <= _T_109 @[ProcessingCore.scala 238:49]
              node _T_110 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[24]) @[Cat.scala 30:58]
              node _T_111 = shl(_T_110, 3) @[ProcessingCore.scala 239:105]
              node _T_112 = asSInt(_T_111) @[ProcessingCore.scala 239:126]
              DualPortedMem_56.io.wrData <= _T_112 @[ProcessingCore.scala 239:49]
              DualPortedMem_57.io.wrEna <= memReadDecoder.io.activatedSignals[25] @[ProcessingCore.scala 237:49]
              node _T_113 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_57.io.writeAddr <= _T_113 @[ProcessingCore.scala 238:49]
              node _T_114 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[25]) @[Cat.scala 30:58]
              node _T_115 = shl(_T_114, 3) @[ProcessingCore.scala 239:105]
              node _T_116 = asSInt(_T_115) @[ProcessingCore.scala 239:126]
              DualPortedMem_57.io.wrData <= _T_116 @[ProcessingCore.scala 239:49]
              DualPortedMem_58.io.wrEna <= memReadDecoder.io.activatedSignals[26] @[ProcessingCore.scala 237:49]
              node _T_117 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_58.io.writeAddr <= _T_117 @[ProcessingCore.scala 238:49]
              node _T_118 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[26]) @[Cat.scala 30:58]
              node _T_119 = shl(_T_118, 3) @[ProcessingCore.scala 239:105]
              node _T_120 = asSInt(_T_119) @[ProcessingCore.scala 239:126]
              DualPortedMem_58.io.wrData <= _T_120 @[ProcessingCore.scala 239:49]
              DualPortedMem_59.io.wrEna <= memReadDecoder.io.activatedSignals[27] @[ProcessingCore.scala 237:49]
              node _T_121 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_59.io.writeAddr <= _T_121 @[ProcessingCore.scala 238:49]
              node _T_122 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[27]) @[Cat.scala 30:58]
              node _T_123 = shl(_T_122, 3) @[ProcessingCore.scala 239:105]
              node _T_124 = asSInt(_T_123) @[ProcessingCore.scala 239:126]
              DualPortedMem_59.io.wrData <= _T_124 @[ProcessingCore.scala 239:49]
              DualPortedMem_60.io.wrEna <= memReadDecoder.io.activatedSignals[28] @[ProcessingCore.scala 237:49]
              node _T_125 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_60.io.writeAddr <= _T_125 @[ProcessingCore.scala 238:49]
              node _T_126 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[28]) @[Cat.scala 30:58]
              node _T_127 = shl(_T_126, 3) @[ProcessingCore.scala 239:105]
              node _T_128 = asSInt(_T_127) @[ProcessingCore.scala 239:126]
              DualPortedMem_60.io.wrData <= _T_128 @[ProcessingCore.scala 239:49]
              DualPortedMem_61.io.wrEna <= memReadDecoder.io.activatedSignals[29] @[ProcessingCore.scala 237:49]
              node _T_129 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_61.io.writeAddr <= _T_129 @[ProcessingCore.scala 238:49]
              node _T_130 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[29]) @[Cat.scala 30:58]
              node _T_131 = shl(_T_130, 3) @[ProcessingCore.scala 239:105]
              node _T_132 = asSInt(_T_131) @[ProcessingCore.scala 239:126]
              DualPortedMem_61.io.wrData <= _T_132 @[ProcessingCore.scala 239:49]
              DualPortedMem_62.io.wrEna <= memReadDecoder.io.activatedSignals[30] @[ProcessingCore.scala 237:49]
              node _T_133 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_62.io.writeAddr <= _T_133 @[ProcessingCore.scala 238:49]
              node _T_134 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[30]) @[Cat.scala 30:58]
              node _T_135 = shl(_T_134, 3) @[ProcessingCore.scala 239:105]
              node _T_136 = asSInt(_T_135) @[ProcessingCore.scala 239:126]
              DualPortedMem_62.io.wrData <= _T_136 @[ProcessingCore.scala 239:49]
              DualPortedMem_63.io.wrEna <= memReadDecoder.io.activatedSignals[31] @[ProcessingCore.scala 237:49]
              node _T_137 = bits(instructionRegister, 21, 12) @[ProcessingCore.scala 238:71]
              DualPortedMem_63.io.writeAddr <= _T_137 @[ProcessingCore.scala 238:49]
              node _T_138 = cat(UInt<1>("h00"), oneHotDecoder.io.writeSignal[31]) @[Cat.scala 30:58]
              node _T_139 = shl(_T_138, 3) @[ProcessingCore.scala 239:105]
              node _T_140 = asSInt(_T_139) @[ProcessingCore.scala 239:126]
              DualPortedMem_63.io.wrData <= _T_140 @[ProcessingCore.scala 239:49]
              instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 241:27]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_141 = eq(UInt<2>("h03"), func) @[Conditional.scala 37:30]
              when _T_141 : @[Conditional.scala 39:67]
                oneHotDecoder.io.enable <= UInt<1>("h01") @[ProcessingCore.scala 245:35]
                oneHotDecoder.io.memRow <= rowVector @[ProcessingCore.scala 246:35]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 247:27]
                DualPortedMem_32.io.wrEna <= oneHotDecoder.io.writeSignal[0] @[ProcessingCore.scala 249:49]
                DualPortedMem_32.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_32.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_33.io.wrEna <= oneHotDecoder.io.writeSignal[1] @[ProcessingCore.scala 249:49]
                DualPortedMem_33.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_33.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_34.io.wrEna <= oneHotDecoder.io.writeSignal[2] @[ProcessingCore.scala 249:49]
                DualPortedMem_34.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_34.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_35.io.wrEna <= oneHotDecoder.io.writeSignal[3] @[ProcessingCore.scala 249:49]
                DualPortedMem_35.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_35.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_36.io.wrEna <= oneHotDecoder.io.writeSignal[4] @[ProcessingCore.scala 249:49]
                DualPortedMem_36.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_36.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_37.io.wrEna <= oneHotDecoder.io.writeSignal[5] @[ProcessingCore.scala 249:49]
                DualPortedMem_37.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_37.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_38.io.wrEna <= oneHotDecoder.io.writeSignal[6] @[ProcessingCore.scala 249:49]
                DualPortedMem_38.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_38.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_39.io.wrEna <= oneHotDecoder.io.writeSignal[7] @[ProcessingCore.scala 249:49]
                DualPortedMem_39.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_39.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_40.io.wrEna <= oneHotDecoder.io.writeSignal[8] @[ProcessingCore.scala 249:49]
                DualPortedMem_40.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_40.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_41.io.wrEna <= oneHotDecoder.io.writeSignal[9] @[ProcessingCore.scala 249:49]
                DualPortedMem_41.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_41.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_42.io.wrEna <= oneHotDecoder.io.writeSignal[10] @[ProcessingCore.scala 249:49]
                DualPortedMem_42.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_42.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_43.io.wrEna <= oneHotDecoder.io.writeSignal[11] @[ProcessingCore.scala 249:49]
                DualPortedMem_43.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_43.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_44.io.wrEna <= oneHotDecoder.io.writeSignal[12] @[ProcessingCore.scala 249:49]
                DualPortedMem_44.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_44.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_45.io.wrEna <= oneHotDecoder.io.writeSignal[13] @[ProcessingCore.scala 249:49]
                DualPortedMem_45.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_45.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_46.io.wrEna <= oneHotDecoder.io.writeSignal[14] @[ProcessingCore.scala 249:49]
                DualPortedMem_46.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_46.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_47.io.wrEna <= oneHotDecoder.io.writeSignal[15] @[ProcessingCore.scala 249:49]
                DualPortedMem_47.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_47.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_48.io.wrEna <= oneHotDecoder.io.writeSignal[16] @[ProcessingCore.scala 249:49]
                DualPortedMem_48.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_48.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_49.io.wrEna <= oneHotDecoder.io.writeSignal[17] @[ProcessingCore.scala 249:49]
                DualPortedMem_49.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_49.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_50.io.wrEna <= oneHotDecoder.io.writeSignal[18] @[ProcessingCore.scala 249:49]
                DualPortedMem_50.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_50.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_51.io.wrEna <= oneHotDecoder.io.writeSignal[19] @[ProcessingCore.scala 249:49]
                DualPortedMem_51.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_51.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_52.io.wrEna <= oneHotDecoder.io.writeSignal[20] @[ProcessingCore.scala 249:49]
                DualPortedMem_52.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_52.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_53.io.wrEna <= oneHotDecoder.io.writeSignal[21] @[ProcessingCore.scala 249:49]
                DualPortedMem_53.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_53.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_54.io.wrEna <= oneHotDecoder.io.writeSignal[22] @[ProcessingCore.scala 249:49]
                DualPortedMem_54.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_54.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_55.io.wrEna <= oneHotDecoder.io.writeSignal[23] @[ProcessingCore.scala 249:49]
                DualPortedMem_55.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_55.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_56.io.wrEna <= oneHotDecoder.io.writeSignal[24] @[ProcessingCore.scala 249:49]
                DualPortedMem_56.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_56.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_57.io.wrEna <= oneHotDecoder.io.writeSignal[25] @[ProcessingCore.scala 249:49]
                DualPortedMem_57.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_57.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_58.io.wrEna <= oneHotDecoder.io.writeSignal[26] @[ProcessingCore.scala 249:49]
                DualPortedMem_58.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_58.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_59.io.wrEna <= oneHotDecoder.io.writeSignal[27] @[ProcessingCore.scala 249:49]
                DualPortedMem_59.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_59.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_60.io.wrEna <= oneHotDecoder.io.writeSignal[28] @[ProcessingCore.scala 249:49]
                DualPortedMem_60.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_60.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_61.io.wrEna <= oneHotDecoder.io.writeSignal[29] @[ProcessingCore.scala 249:49]
                DualPortedMem_61.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_61.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_62.io.wrEna <= oneHotDecoder.io.writeSignal[30] @[ProcessingCore.scala 249:49]
                DualPortedMem_62.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_62.io.wrData <= activation @[ProcessingCore.scala 251:49]
                DualPortedMem_63.io.wrEna <= oneHotDecoder.io.writeSignal[31] @[ProcessingCore.scala 249:49]
                DualPortedMem_63.io.writeAddr <= colVector @[ProcessingCore.scala 250:49]
                DualPortedMem_63.io.wrData <= activation @[ProcessingCore.scala 251:49]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_142 = eq(UInt<3>("h04"), func) @[Conditional.scala 37:30]
                when _T_142 : @[Conditional.scala 39:67]
                  memReadDecoder.io.enable <= UInt<1>("h01") @[ProcessingCore.scala 257:36]
                  memReadDecoder.io.PEs <= rowVector @[ProcessingCore.scala 258:36]
                  DualPortedMem_32.io.rdEna <= memReadDecoder.io.activatedSignals[0] @[ProcessingCore.scala 260:48]
                  DualPortedMem_32.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_33.io.rdEna <= memReadDecoder.io.activatedSignals[1] @[ProcessingCore.scala 260:48]
                  DualPortedMem_33.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_34.io.rdEna <= memReadDecoder.io.activatedSignals[2] @[ProcessingCore.scala 260:48]
                  DualPortedMem_34.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_35.io.rdEna <= memReadDecoder.io.activatedSignals[3] @[ProcessingCore.scala 260:48]
                  DualPortedMem_35.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_36.io.rdEna <= memReadDecoder.io.activatedSignals[4] @[ProcessingCore.scala 260:48]
                  DualPortedMem_36.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_37.io.rdEna <= memReadDecoder.io.activatedSignals[5] @[ProcessingCore.scala 260:48]
                  DualPortedMem_37.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_38.io.rdEna <= memReadDecoder.io.activatedSignals[6] @[ProcessingCore.scala 260:48]
                  DualPortedMem_38.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_39.io.rdEna <= memReadDecoder.io.activatedSignals[7] @[ProcessingCore.scala 260:48]
                  DualPortedMem_39.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_40.io.rdEna <= memReadDecoder.io.activatedSignals[8] @[ProcessingCore.scala 260:48]
                  DualPortedMem_40.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_41.io.rdEna <= memReadDecoder.io.activatedSignals[9] @[ProcessingCore.scala 260:48]
                  DualPortedMem_41.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_42.io.rdEna <= memReadDecoder.io.activatedSignals[10] @[ProcessingCore.scala 260:48]
                  DualPortedMem_42.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_43.io.rdEna <= memReadDecoder.io.activatedSignals[11] @[ProcessingCore.scala 260:48]
                  DualPortedMem_43.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_44.io.rdEna <= memReadDecoder.io.activatedSignals[12] @[ProcessingCore.scala 260:48]
                  DualPortedMem_44.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_45.io.rdEna <= memReadDecoder.io.activatedSignals[13] @[ProcessingCore.scala 260:48]
                  DualPortedMem_45.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_46.io.rdEna <= memReadDecoder.io.activatedSignals[14] @[ProcessingCore.scala 260:48]
                  DualPortedMem_46.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_47.io.rdEna <= memReadDecoder.io.activatedSignals[15] @[ProcessingCore.scala 260:48]
                  DualPortedMem_47.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_48.io.rdEna <= memReadDecoder.io.activatedSignals[16] @[ProcessingCore.scala 260:48]
                  DualPortedMem_48.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_49.io.rdEna <= memReadDecoder.io.activatedSignals[17] @[ProcessingCore.scala 260:48]
                  DualPortedMem_49.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_50.io.rdEna <= memReadDecoder.io.activatedSignals[18] @[ProcessingCore.scala 260:48]
                  DualPortedMem_50.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_51.io.rdEna <= memReadDecoder.io.activatedSignals[19] @[ProcessingCore.scala 260:48]
                  DualPortedMem_51.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_52.io.rdEna <= memReadDecoder.io.activatedSignals[20] @[ProcessingCore.scala 260:48]
                  DualPortedMem_52.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_53.io.rdEna <= memReadDecoder.io.activatedSignals[21] @[ProcessingCore.scala 260:48]
                  DualPortedMem_53.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_54.io.rdEna <= memReadDecoder.io.activatedSignals[22] @[ProcessingCore.scala 260:48]
                  DualPortedMem_54.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_55.io.rdEna <= memReadDecoder.io.activatedSignals[23] @[ProcessingCore.scala 260:48]
                  DualPortedMem_55.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_56.io.rdEna <= memReadDecoder.io.activatedSignals[24] @[ProcessingCore.scala 260:48]
                  DualPortedMem_56.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_57.io.rdEna <= memReadDecoder.io.activatedSignals[25] @[ProcessingCore.scala 260:48]
                  DualPortedMem_57.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_58.io.rdEna <= memReadDecoder.io.activatedSignals[26] @[ProcessingCore.scala 260:48]
                  DualPortedMem_58.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_59.io.rdEna <= memReadDecoder.io.activatedSignals[27] @[ProcessingCore.scala 260:48]
                  DualPortedMem_59.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_60.io.rdEna <= memReadDecoder.io.activatedSignals[28] @[ProcessingCore.scala 260:48]
                  DualPortedMem_60.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_61.io.rdEna <= memReadDecoder.io.activatedSignals[29] @[ProcessingCore.scala 260:48]
                  DualPortedMem_61.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_62.io.rdEna <= memReadDecoder.io.activatedSignals[30] @[ProcessingCore.scala 260:48]
                  DualPortedMem_62.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  DualPortedMem_63.io.rdEna <= memReadDecoder.io.activatedSignals[31] @[ProcessingCore.scala 260:48]
                  DualPortedMem_63.io.readAddr <= colVector @[ProcessingCore.scala 261:48]
                  rdDataVecValid.io.signal2delay <= UInt<1>("h01") @[ProcessingCore.scala 263:42]
                  instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 264:42]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_143 = eq(UInt<3>("h05"), func) @[Conditional.scala 37:30]
                  when _T_143 : @[Conditional.scala 39:67]
                    memReadDecoder.io.PEs <= matrixCol @[ProcessingCore.scala 267:45]
                    weightRdAddrNode <= matrixRow @[ProcessingCore.scala 268:45]
                    memReadDecoder.io.enable <= UInt<1>("h01") @[ProcessingCore.scala 269:45]
                    instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 270:45]
                    rdDataMatrixValid.io.signal2delay <= UInt<1>("h01") @[ProcessingCore.scala 271:45]
                    _WIRE_64 <= memReadDecoder.io.activatedSignals[0] @[ProcessingCore.scala 273:31]
                    _WIRE_65 <= memReadDecoder.io.activatedSignals[1] @[ProcessingCore.scala 273:31]
                    _WIRE_66 <= memReadDecoder.io.activatedSignals[2] @[ProcessingCore.scala 273:31]
                    _WIRE_67 <= memReadDecoder.io.activatedSignals[3] @[ProcessingCore.scala 273:31]
                    _WIRE_68 <= memReadDecoder.io.activatedSignals[4] @[ProcessingCore.scala 273:31]
                    _WIRE_69 <= memReadDecoder.io.activatedSignals[5] @[ProcessingCore.scala 273:31]
                    _WIRE_70 <= memReadDecoder.io.activatedSignals[6] @[ProcessingCore.scala 273:31]
                    _WIRE_71 <= memReadDecoder.io.activatedSignals[7] @[ProcessingCore.scala 273:31]
                    _WIRE_72 <= memReadDecoder.io.activatedSignals[8] @[ProcessingCore.scala 273:31]
                    _WIRE_73 <= memReadDecoder.io.activatedSignals[9] @[ProcessingCore.scala 273:31]
                    _WIRE_74 <= memReadDecoder.io.activatedSignals[10] @[ProcessingCore.scala 273:31]
                    _WIRE_75 <= memReadDecoder.io.activatedSignals[11] @[ProcessingCore.scala 273:31]
                    _WIRE_76 <= memReadDecoder.io.activatedSignals[12] @[ProcessingCore.scala 273:31]
                    _WIRE_77 <= memReadDecoder.io.activatedSignals[13] @[ProcessingCore.scala 273:31]
                    _WIRE_78 <= memReadDecoder.io.activatedSignals[14] @[ProcessingCore.scala 273:31]
                    _WIRE_79 <= memReadDecoder.io.activatedSignals[15] @[ProcessingCore.scala 273:31]
                    _WIRE_80 <= memReadDecoder.io.activatedSignals[16] @[ProcessingCore.scala 273:31]
                    _WIRE_81 <= memReadDecoder.io.activatedSignals[17] @[ProcessingCore.scala 273:31]
                    _WIRE_82 <= memReadDecoder.io.activatedSignals[18] @[ProcessingCore.scala 273:31]
                    _WIRE_83 <= memReadDecoder.io.activatedSignals[19] @[ProcessingCore.scala 273:31]
                    _WIRE_84 <= memReadDecoder.io.activatedSignals[20] @[ProcessingCore.scala 273:31]
                    _WIRE_85 <= memReadDecoder.io.activatedSignals[21] @[ProcessingCore.scala 273:31]
                    _WIRE_86 <= memReadDecoder.io.activatedSignals[22] @[ProcessingCore.scala 273:31]
                    _WIRE_87 <= memReadDecoder.io.activatedSignals[23] @[ProcessingCore.scala 273:31]
                    _WIRE_88 <= memReadDecoder.io.activatedSignals[24] @[ProcessingCore.scala 273:31]
                    _WIRE_89 <= memReadDecoder.io.activatedSignals[25] @[ProcessingCore.scala 273:31]
                    _WIRE_90 <= memReadDecoder.io.activatedSignals[26] @[ProcessingCore.scala 273:31]
                    _WIRE_91 <= memReadDecoder.io.activatedSignals[27] @[ProcessingCore.scala 273:31]
                    _WIRE_92 <= memReadDecoder.io.activatedSignals[28] @[ProcessingCore.scala 273:31]
                    _WIRE_93 <= memReadDecoder.io.activatedSignals[29] @[ProcessingCore.scala 273:31]
                    _WIRE_94 <= memReadDecoder.io.activatedSignals[30] @[ProcessingCore.scala 273:31]
                    _WIRE_95 <= memReadDecoder.io.activatedSignals[31] @[ProcessingCore.scala 273:31]
                    skip @[Conditional.scala 39:67]
        skip @[ProcessingCore.scala 209:44]
      else : @[ProcessingCore.scala 278:40]
        node _T_144 = eq(op, UInt<1>("h00")) @[ProcessingCore.scala 278:19]
        when _T_144 : @[ProcessingCore.scala 278:40]
          node _T_145 = eq(UInt<1>("h00"), func) @[Conditional.scala 37:30]
          when _T_145 : @[Conditional.scala 40:58]
            memReadDecoder.io.PEs <= VinSizeReg @[ProcessingCore.scala 285:37]
            oneHotDecoder.io.memRow <= matrixRowCounter @[ProcessingCore.scala 286:37]
            when adderTree.io.sumValid : @[ProcessingCore.scala 287:38]
              node _matrixRowCounter_T = add(matrixRowCounter, UInt<1>("h01")) @[ProcessingCore.scala 288:57]
              node _matrixRowCounter_T_1 = tail(_matrixRowCounter_T, 1) @[ProcessingCore.scala 288:57]
              matrixRowCounter <= _matrixRowCounter_T_1 @[ProcessingCore.scala 288:37]
              oneHotDecoder.io.enable <= UInt<1>("h01") @[ProcessingCore.scala 289:37]
              skip @[ProcessingCore.scala 287:38]
            node _T_146 = eq(colBanksCounter, VoutSizeReg) @[ProcessingCore.scala 291:33]
            when _T_146 : @[ProcessingCore.scala 291:50]
              node _T_147 = eq(matrixRowCounter, VoutSizeReg) @[ProcessingCore.scala 292:35]
              when _T_147 : @[ProcessingCore.scala 292:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 293:31]
                skip @[ProcessingCore.scala 292:51]
              skip @[ProcessingCore.scala 291:50]
            else : @[ProcessingCore.scala 295:22]
              rdDataMatrixValid.io.signal2delay <= UInt<1>("h01") @[ProcessingCore.scala 296:47]
              memReadDecoder.io.enable <= UInt<1>("h01") @[ProcessingCore.scala 297:47]
              node _colBanksCounter_T = add(colBanksCounter, UInt<1>("h01")) @[ProcessingCore.scala 298:66]
              node _colBanksCounter_T_1 = tail(_colBanksCounter_T, 1) @[ProcessingCore.scala 298:66]
              colBanksCounter <= _colBanksCounter_T_1 @[ProcessingCore.scala 298:47]
              skip @[ProcessingCore.scala 295:22]
            node _T_148 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_149 = tail(_T_148, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem.io.readAddr <= _T_149 @[ProcessingCore.scala 302:49]
            DualPortedMem.io.rdEna <= memReadDecoder.io.activatedSignals[0] @[ProcessingCore.scala 303:49]
            DualPortedMem_32.io.rdEna <= memReadDecoder.io.activatedSignals[0] @[ProcessingCore.scala 304:49]
            DualPortedMem_32.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_32.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_32.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_32.io.wrEna <= oneHotDecoder.io.writeSignal[0] @[ProcessingCore.scala 308:49]
            node _T_150 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_151 = tail(_T_150, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_1.io.readAddr <= _T_151 @[ProcessingCore.scala 302:49]
            DualPortedMem_1.io.rdEna <= memReadDecoder.io.activatedSignals[1] @[ProcessingCore.scala 303:49]
            DualPortedMem_33.io.rdEna <= memReadDecoder.io.activatedSignals[1] @[ProcessingCore.scala 304:49]
            DualPortedMem_33.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_33.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_33.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_33.io.wrEna <= oneHotDecoder.io.writeSignal[1] @[ProcessingCore.scala 308:49]
            node _T_152 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_153 = tail(_T_152, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_2.io.readAddr <= _T_153 @[ProcessingCore.scala 302:49]
            DualPortedMem_2.io.rdEna <= memReadDecoder.io.activatedSignals[2] @[ProcessingCore.scala 303:49]
            DualPortedMem_34.io.rdEna <= memReadDecoder.io.activatedSignals[2] @[ProcessingCore.scala 304:49]
            DualPortedMem_34.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_34.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_34.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_34.io.wrEna <= oneHotDecoder.io.writeSignal[2] @[ProcessingCore.scala 308:49]
            node _T_154 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_155 = tail(_T_154, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_3.io.readAddr <= _T_155 @[ProcessingCore.scala 302:49]
            DualPortedMem_3.io.rdEna <= memReadDecoder.io.activatedSignals[3] @[ProcessingCore.scala 303:49]
            DualPortedMem_35.io.rdEna <= memReadDecoder.io.activatedSignals[3] @[ProcessingCore.scala 304:49]
            DualPortedMem_35.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_35.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_35.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_35.io.wrEna <= oneHotDecoder.io.writeSignal[3] @[ProcessingCore.scala 308:49]
            node _T_156 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_157 = tail(_T_156, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_4.io.readAddr <= _T_157 @[ProcessingCore.scala 302:49]
            DualPortedMem_4.io.rdEna <= memReadDecoder.io.activatedSignals[4] @[ProcessingCore.scala 303:49]
            DualPortedMem_36.io.rdEna <= memReadDecoder.io.activatedSignals[4] @[ProcessingCore.scala 304:49]
            DualPortedMem_36.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_36.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_36.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_36.io.wrEna <= oneHotDecoder.io.writeSignal[4] @[ProcessingCore.scala 308:49]
            node _T_158 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_159 = tail(_T_158, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_5.io.readAddr <= _T_159 @[ProcessingCore.scala 302:49]
            DualPortedMem_5.io.rdEna <= memReadDecoder.io.activatedSignals[5] @[ProcessingCore.scala 303:49]
            DualPortedMem_37.io.rdEna <= memReadDecoder.io.activatedSignals[5] @[ProcessingCore.scala 304:49]
            DualPortedMem_37.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_37.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_37.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_37.io.wrEna <= oneHotDecoder.io.writeSignal[5] @[ProcessingCore.scala 308:49]
            node _T_160 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_161 = tail(_T_160, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_6.io.readAddr <= _T_161 @[ProcessingCore.scala 302:49]
            DualPortedMem_6.io.rdEna <= memReadDecoder.io.activatedSignals[6] @[ProcessingCore.scala 303:49]
            DualPortedMem_38.io.rdEna <= memReadDecoder.io.activatedSignals[6] @[ProcessingCore.scala 304:49]
            DualPortedMem_38.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_38.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_38.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_38.io.wrEna <= oneHotDecoder.io.writeSignal[6] @[ProcessingCore.scala 308:49]
            node _T_162 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_163 = tail(_T_162, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_7.io.readAddr <= _T_163 @[ProcessingCore.scala 302:49]
            DualPortedMem_7.io.rdEna <= memReadDecoder.io.activatedSignals[7] @[ProcessingCore.scala 303:49]
            DualPortedMem_39.io.rdEna <= memReadDecoder.io.activatedSignals[7] @[ProcessingCore.scala 304:49]
            DualPortedMem_39.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_39.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_39.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_39.io.wrEna <= oneHotDecoder.io.writeSignal[7] @[ProcessingCore.scala 308:49]
            node _T_164 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_165 = tail(_T_164, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_8.io.readAddr <= _T_165 @[ProcessingCore.scala 302:49]
            DualPortedMem_8.io.rdEna <= memReadDecoder.io.activatedSignals[8] @[ProcessingCore.scala 303:49]
            DualPortedMem_40.io.rdEna <= memReadDecoder.io.activatedSignals[8] @[ProcessingCore.scala 304:49]
            DualPortedMem_40.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_40.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_40.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_40.io.wrEna <= oneHotDecoder.io.writeSignal[8] @[ProcessingCore.scala 308:49]
            node _T_166 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_167 = tail(_T_166, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_9.io.readAddr <= _T_167 @[ProcessingCore.scala 302:49]
            DualPortedMem_9.io.rdEna <= memReadDecoder.io.activatedSignals[9] @[ProcessingCore.scala 303:49]
            DualPortedMem_41.io.rdEna <= memReadDecoder.io.activatedSignals[9] @[ProcessingCore.scala 304:49]
            DualPortedMem_41.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_41.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_41.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_41.io.wrEna <= oneHotDecoder.io.writeSignal[9] @[ProcessingCore.scala 308:49]
            node _T_168 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_169 = tail(_T_168, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_10.io.readAddr <= _T_169 @[ProcessingCore.scala 302:49]
            DualPortedMem_10.io.rdEna <= memReadDecoder.io.activatedSignals[10] @[ProcessingCore.scala 303:49]
            DualPortedMem_42.io.rdEna <= memReadDecoder.io.activatedSignals[10] @[ProcessingCore.scala 304:49]
            DualPortedMem_42.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_42.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_42.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_42.io.wrEna <= oneHotDecoder.io.writeSignal[10] @[ProcessingCore.scala 308:49]
            node _T_170 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_171 = tail(_T_170, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_11.io.readAddr <= _T_171 @[ProcessingCore.scala 302:49]
            DualPortedMem_11.io.rdEna <= memReadDecoder.io.activatedSignals[11] @[ProcessingCore.scala 303:49]
            DualPortedMem_43.io.rdEna <= memReadDecoder.io.activatedSignals[11] @[ProcessingCore.scala 304:49]
            DualPortedMem_43.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_43.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_43.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_43.io.wrEna <= oneHotDecoder.io.writeSignal[11] @[ProcessingCore.scala 308:49]
            node _T_172 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_173 = tail(_T_172, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_12.io.readAddr <= _T_173 @[ProcessingCore.scala 302:49]
            DualPortedMem_12.io.rdEna <= memReadDecoder.io.activatedSignals[12] @[ProcessingCore.scala 303:49]
            DualPortedMem_44.io.rdEna <= memReadDecoder.io.activatedSignals[12] @[ProcessingCore.scala 304:49]
            DualPortedMem_44.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_44.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_44.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_44.io.wrEna <= oneHotDecoder.io.writeSignal[12] @[ProcessingCore.scala 308:49]
            node _T_174 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_175 = tail(_T_174, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_13.io.readAddr <= _T_175 @[ProcessingCore.scala 302:49]
            DualPortedMem_13.io.rdEna <= memReadDecoder.io.activatedSignals[13] @[ProcessingCore.scala 303:49]
            DualPortedMem_45.io.rdEna <= memReadDecoder.io.activatedSignals[13] @[ProcessingCore.scala 304:49]
            DualPortedMem_45.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_45.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_45.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_45.io.wrEna <= oneHotDecoder.io.writeSignal[13] @[ProcessingCore.scala 308:49]
            node _T_176 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_177 = tail(_T_176, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_14.io.readAddr <= _T_177 @[ProcessingCore.scala 302:49]
            DualPortedMem_14.io.rdEna <= memReadDecoder.io.activatedSignals[14] @[ProcessingCore.scala 303:49]
            DualPortedMem_46.io.rdEna <= memReadDecoder.io.activatedSignals[14] @[ProcessingCore.scala 304:49]
            DualPortedMem_46.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_46.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_46.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_46.io.wrEna <= oneHotDecoder.io.writeSignal[14] @[ProcessingCore.scala 308:49]
            node _T_178 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_179 = tail(_T_178, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_15.io.readAddr <= _T_179 @[ProcessingCore.scala 302:49]
            DualPortedMem_15.io.rdEna <= memReadDecoder.io.activatedSignals[15] @[ProcessingCore.scala 303:49]
            DualPortedMem_47.io.rdEna <= memReadDecoder.io.activatedSignals[15] @[ProcessingCore.scala 304:49]
            DualPortedMem_47.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_47.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_47.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_47.io.wrEna <= oneHotDecoder.io.writeSignal[15] @[ProcessingCore.scala 308:49]
            node _T_180 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_181 = tail(_T_180, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_16.io.readAddr <= _T_181 @[ProcessingCore.scala 302:49]
            DualPortedMem_16.io.rdEna <= memReadDecoder.io.activatedSignals[16] @[ProcessingCore.scala 303:49]
            DualPortedMem_48.io.rdEna <= memReadDecoder.io.activatedSignals[16] @[ProcessingCore.scala 304:49]
            DualPortedMem_48.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_48.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_48.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_48.io.wrEna <= oneHotDecoder.io.writeSignal[16] @[ProcessingCore.scala 308:49]
            node _T_182 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_183 = tail(_T_182, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_17.io.readAddr <= _T_183 @[ProcessingCore.scala 302:49]
            DualPortedMem_17.io.rdEna <= memReadDecoder.io.activatedSignals[17] @[ProcessingCore.scala 303:49]
            DualPortedMem_49.io.rdEna <= memReadDecoder.io.activatedSignals[17] @[ProcessingCore.scala 304:49]
            DualPortedMem_49.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_49.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_49.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_49.io.wrEna <= oneHotDecoder.io.writeSignal[17] @[ProcessingCore.scala 308:49]
            node _T_184 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_185 = tail(_T_184, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_18.io.readAddr <= _T_185 @[ProcessingCore.scala 302:49]
            DualPortedMem_18.io.rdEna <= memReadDecoder.io.activatedSignals[18] @[ProcessingCore.scala 303:49]
            DualPortedMem_50.io.rdEna <= memReadDecoder.io.activatedSignals[18] @[ProcessingCore.scala 304:49]
            DualPortedMem_50.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_50.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_50.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_50.io.wrEna <= oneHotDecoder.io.writeSignal[18] @[ProcessingCore.scala 308:49]
            node _T_186 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_187 = tail(_T_186, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_19.io.readAddr <= _T_187 @[ProcessingCore.scala 302:49]
            DualPortedMem_19.io.rdEna <= memReadDecoder.io.activatedSignals[19] @[ProcessingCore.scala 303:49]
            DualPortedMem_51.io.rdEna <= memReadDecoder.io.activatedSignals[19] @[ProcessingCore.scala 304:49]
            DualPortedMem_51.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_51.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_51.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_51.io.wrEna <= oneHotDecoder.io.writeSignal[19] @[ProcessingCore.scala 308:49]
            node _T_188 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_189 = tail(_T_188, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_20.io.readAddr <= _T_189 @[ProcessingCore.scala 302:49]
            DualPortedMem_20.io.rdEna <= memReadDecoder.io.activatedSignals[20] @[ProcessingCore.scala 303:49]
            DualPortedMem_52.io.rdEna <= memReadDecoder.io.activatedSignals[20] @[ProcessingCore.scala 304:49]
            DualPortedMem_52.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_52.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_52.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_52.io.wrEna <= oneHotDecoder.io.writeSignal[20] @[ProcessingCore.scala 308:49]
            node _T_190 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_191 = tail(_T_190, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_21.io.readAddr <= _T_191 @[ProcessingCore.scala 302:49]
            DualPortedMem_21.io.rdEna <= memReadDecoder.io.activatedSignals[21] @[ProcessingCore.scala 303:49]
            DualPortedMem_53.io.rdEna <= memReadDecoder.io.activatedSignals[21] @[ProcessingCore.scala 304:49]
            DualPortedMem_53.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_53.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_53.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_53.io.wrEna <= oneHotDecoder.io.writeSignal[21] @[ProcessingCore.scala 308:49]
            node _T_192 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_193 = tail(_T_192, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_22.io.readAddr <= _T_193 @[ProcessingCore.scala 302:49]
            DualPortedMem_22.io.rdEna <= memReadDecoder.io.activatedSignals[22] @[ProcessingCore.scala 303:49]
            DualPortedMem_54.io.rdEna <= memReadDecoder.io.activatedSignals[22] @[ProcessingCore.scala 304:49]
            DualPortedMem_54.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_54.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_54.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_54.io.wrEna <= oneHotDecoder.io.writeSignal[22] @[ProcessingCore.scala 308:49]
            node _T_194 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_195 = tail(_T_194, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_23.io.readAddr <= _T_195 @[ProcessingCore.scala 302:49]
            DualPortedMem_23.io.rdEna <= memReadDecoder.io.activatedSignals[23] @[ProcessingCore.scala 303:49]
            DualPortedMem_55.io.rdEna <= memReadDecoder.io.activatedSignals[23] @[ProcessingCore.scala 304:49]
            DualPortedMem_55.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_55.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_55.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_55.io.wrEna <= oneHotDecoder.io.writeSignal[23] @[ProcessingCore.scala 308:49]
            node _T_196 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_197 = tail(_T_196, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_24.io.readAddr <= _T_197 @[ProcessingCore.scala 302:49]
            DualPortedMem_24.io.rdEna <= memReadDecoder.io.activatedSignals[24] @[ProcessingCore.scala 303:49]
            DualPortedMem_56.io.rdEna <= memReadDecoder.io.activatedSignals[24] @[ProcessingCore.scala 304:49]
            DualPortedMem_56.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_56.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_56.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_56.io.wrEna <= oneHotDecoder.io.writeSignal[24] @[ProcessingCore.scala 308:49]
            node _T_198 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_199 = tail(_T_198, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_25.io.readAddr <= _T_199 @[ProcessingCore.scala 302:49]
            DualPortedMem_25.io.rdEna <= memReadDecoder.io.activatedSignals[25] @[ProcessingCore.scala 303:49]
            DualPortedMem_57.io.rdEna <= memReadDecoder.io.activatedSignals[25] @[ProcessingCore.scala 304:49]
            DualPortedMem_57.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_57.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_57.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_57.io.wrEna <= oneHotDecoder.io.writeSignal[25] @[ProcessingCore.scala 308:49]
            node _T_200 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_201 = tail(_T_200, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_26.io.readAddr <= _T_201 @[ProcessingCore.scala 302:49]
            DualPortedMem_26.io.rdEna <= memReadDecoder.io.activatedSignals[26] @[ProcessingCore.scala 303:49]
            DualPortedMem_58.io.rdEna <= memReadDecoder.io.activatedSignals[26] @[ProcessingCore.scala 304:49]
            DualPortedMem_58.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_58.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_58.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_58.io.wrEna <= oneHotDecoder.io.writeSignal[26] @[ProcessingCore.scala 308:49]
            node _T_202 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_203 = tail(_T_202, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_27.io.readAddr <= _T_203 @[ProcessingCore.scala 302:49]
            DualPortedMem_27.io.rdEna <= memReadDecoder.io.activatedSignals[27] @[ProcessingCore.scala 303:49]
            DualPortedMem_59.io.rdEna <= memReadDecoder.io.activatedSignals[27] @[ProcessingCore.scala 304:49]
            DualPortedMem_59.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_59.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_59.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_59.io.wrEna <= oneHotDecoder.io.writeSignal[27] @[ProcessingCore.scala 308:49]
            node _T_204 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_205 = tail(_T_204, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_28.io.readAddr <= _T_205 @[ProcessingCore.scala 302:49]
            DualPortedMem_28.io.rdEna <= memReadDecoder.io.activatedSignals[28] @[ProcessingCore.scala 303:49]
            DualPortedMem_60.io.rdEna <= memReadDecoder.io.activatedSignals[28] @[ProcessingCore.scala 304:49]
            DualPortedMem_60.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_60.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_60.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_60.io.wrEna <= oneHotDecoder.io.writeSignal[28] @[ProcessingCore.scala 308:49]
            node _T_206 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_207 = tail(_T_206, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_29.io.readAddr <= _T_207 @[ProcessingCore.scala 302:49]
            DualPortedMem_29.io.rdEna <= memReadDecoder.io.activatedSignals[29] @[ProcessingCore.scala 303:49]
            DualPortedMem_61.io.rdEna <= memReadDecoder.io.activatedSignals[29] @[ProcessingCore.scala 304:49]
            DualPortedMem_61.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_61.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_61.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_61.io.wrEna <= oneHotDecoder.io.writeSignal[29] @[ProcessingCore.scala 308:49]
            node _T_208 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_209 = tail(_T_208, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_30.io.readAddr <= _T_209 @[ProcessingCore.scala 302:49]
            DualPortedMem_30.io.rdEna <= memReadDecoder.io.activatedSignals[30] @[ProcessingCore.scala 303:49]
            DualPortedMem_62.io.rdEna <= memReadDecoder.io.activatedSignals[30] @[ProcessingCore.scala 304:49]
            DualPortedMem_62.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_62.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_62.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_62.io.wrEna <= oneHotDecoder.io.writeSignal[30] @[ProcessingCore.scala 308:49]
            node _T_210 = add(MinAddr, colBanksCounter) @[ProcessingCore.scala 302:60]
            node _T_211 = tail(_T_210, 1) @[ProcessingCore.scala 302:60]
            DualPortedMem_31.io.readAddr <= _T_211 @[ProcessingCore.scala 302:49]
            DualPortedMem_31.io.rdEna <= memReadDecoder.io.activatedSignals[31] @[ProcessingCore.scala 303:49]
            DualPortedMem_63.io.rdEna <= memReadDecoder.io.activatedSignals[31] @[ProcessingCore.scala 304:49]
            DualPortedMem_63.io.readAddr <= VinAddr @[ProcessingCore.scala 305:49]
            DualPortedMem_63.io.wrData <= quantizedSum @[ProcessingCore.scala 306:49]
            DualPortedMem_63.io.writeAddr <= VoutAddr @[ProcessingCore.scala 307:49]
            DualPortedMem_63.io.wrEna <= oneHotDecoder.io.writeSignal[31] @[ProcessingCore.scala 308:49]
            skip @[Conditional.scala 40:58]
          else : @[Conditional.scala 39:67]
            node _T_212 = eq(UInt<1>("h01"), func) @[Conditional.scala 37:30]
            when _T_212 : @[Conditional.scala 39:67]
              node _rdWrEnaFlip_T = not(rdWrEnaFlip) @[ProcessingCore.scala 312:40]
              rdWrEnaFlip <= _rdWrEnaFlip_T @[ProcessingCore.scala 312:36]
              activationBlock.io.ena <= rdWrEnaFlip @[ProcessingCore.scala 313:36]
              memReadDecoder.io.enable <= UInt<1>("h01") @[ProcessingCore.scala 314:36]
              memReadDecoder.io.PEs <= vinSize @[ProcessingCore.scala 315:36]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_32.io.wrData <= activationBlock.io.activation[0] @[ProcessingCore.scala 319:51]
                DualPortedMem_32.io.wrEna <= memReadDecoder.io.activatedSignals[0] @[ProcessingCore.scala 320:51]
                DualPortedMem_32.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_32.io.rdEna <= memReadDecoder.io.activatedSignals[0] @[ProcessingCore.scala 324:50]
                DualPortedMem_32.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_33.io.wrData <= activationBlock.io.activation[1] @[ProcessingCore.scala 319:51]
                DualPortedMem_33.io.wrEna <= memReadDecoder.io.activatedSignals[1] @[ProcessingCore.scala 320:51]
                DualPortedMem_33.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_33.io.rdEna <= memReadDecoder.io.activatedSignals[1] @[ProcessingCore.scala 324:50]
                DualPortedMem_33.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_34.io.wrData <= activationBlock.io.activation[2] @[ProcessingCore.scala 319:51]
                DualPortedMem_34.io.wrEna <= memReadDecoder.io.activatedSignals[2] @[ProcessingCore.scala 320:51]
                DualPortedMem_34.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_34.io.rdEna <= memReadDecoder.io.activatedSignals[2] @[ProcessingCore.scala 324:50]
                DualPortedMem_34.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_35.io.wrData <= activationBlock.io.activation[3] @[ProcessingCore.scala 319:51]
                DualPortedMem_35.io.wrEna <= memReadDecoder.io.activatedSignals[3] @[ProcessingCore.scala 320:51]
                DualPortedMem_35.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_35.io.rdEna <= memReadDecoder.io.activatedSignals[3] @[ProcessingCore.scala 324:50]
                DualPortedMem_35.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_36.io.wrData <= activationBlock.io.activation[4] @[ProcessingCore.scala 319:51]
                DualPortedMem_36.io.wrEna <= memReadDecoder.io.activatedSignals[4] @[ProcessingCore.scala 320:51]
                DualPortedMem_36.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_36.io.rdEna <= memReadDecoder.io.activatedSignals[4] @[ProcessingCore.scala 324:50]
                DualPortedMem_36.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_37.io.wrData <= activationBlock.io.activation[5] @[ProcessingCore.scala 319:51]
                DualPortedMem_37.io.wrEna <= memReadDecoder.io.activatedSignals[5] @[ProcessingCore.scala 320:51]
                DualPortedMem_37.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_37.io.rdEna <= memReadDecoder.io.activatedSignals[5] @[ProcessingCore.scala 324:50]
                DualPortedMem_37.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_38.io.wrData <= activationBlock.io.activation[6] @[ProcessingCore.scala 319:51]
                DualPortedMem_38.io.wrEna <= memReadDecoder.io.activatedSignals[6] @[ProcessingCore.scala 320:51]
                DualPortedMem_38.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_38.io.rdEna <= memReadDecoder.io.activatedSignals[6] @[ProcessingCore.scala 324:50]
                DualPortedMem_38.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_39.io.wrData <= activationBlock.io.activation[7] @[ProcessingCore.scala 319:51]
                DualPortedMem_39.io.wrEna <= memReadDecoder.io.activatedSignals[7] @[ProcessingCore.scala 320:51]
                DualPortedMem_39.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_39.io.rdEna <= memReadDecoder.io.activatedSignals[7] @[ProcessingCore.scala 324:50]
                DualPortedMem_39.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_40.io.wrData <= activationBlock.io.activation[8] @[ProcessingCore.scala 319:51]
                DualPortedMem_40.io.wrEna <= memReadDecoder.io.activatedSignals[8] @[ProcessingCore.scala 320:51]
                DualPortedMem_40.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_40.io.rdEna <= memReadDecoder.io.activatedSignals[8] @[ProcessingCore.scala 324:50]
                DualPortedMem_40.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_41.io.wrData <= activationBlock.io.activation[9] @[ProcessingCore.scala 319:51]
                DualPortedMem_41.io.wrEna <= memReadDecoder.io.activatedSignals[9] @[ProcessingCore.scala 320:51]
                DualPortedMem_41.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_41.io.rdEna <= memReadDecoder.io.activatedSignals[9] @[ProcessingCore.scala 324:50]
                DualPortedMem_41.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_42.io.wrData <= activationBlock.io.activation[10] @[ProcessingCore.scala 319:51]
                DualPortedMem_42.io.wrEna <= memReadDecoder.io.activatedSignals[10] @[ProcessingCore.scala 320:51]
                DualPortedMem_42.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_42.io.rdEna <= memReadDecoder.io.activatedSignals[10] @[ProcessingCore.scala 324:50]
                DualPortedMem_42.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_43.io.wrData <= activationBlock.io.activation[11] @[ProcessingCore.scala 319:51]
                DualPortedMem_43.io.wrEna <= memReadDecoder.io.activatedSignals[11] @[ProcessingCore.scala 320:51]
                DualPortedMem_43.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_43.io.rdEna <= memReadDecoder.io.activatedSignals[11] @[ProcessingCore.scala 324:50]
                DualPortedMem_43.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_44.io.wrData <= activationBlock.io.activation[12] @[ProcessingCore.scala 319:51]
                DualPortedMem_44.io.wrEna <= memReadDecoder.io.activatedSignals[12] @[ProcessingCore.scala 320:51]
                DualPortedMem_44.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_44.io.rdEna <= memReadDecoder.io.activatedSignals[12] @[ProcessingCore.scala 324:50]
                DualPortedMem_44.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_45.io.wrData <= activationBlock.io.activation[13] @[ProcessingCore.scala 319:51]
                DualPortedMem_45.io.wrEna <= memReadDecoder.io.activatedSignals[13] @[ProcessingCore.scala 320:51]
                DualPortedMem_45.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_45.io.rdEna <= memReadDecoder.io.activatedSignals[13] @[ProcessingCore.scala 324:50]
                DualPortedMem_45.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_46.io.wrData <= activationBlock.io.activation[14] @[ProcessingCore.scala 319:51]
                DualPortedMem_46.io.wrEna <= memReadDecoder.io.activatedSignals[14] @[ProcessingCore.scala 320:51]
                DualPortedMem_46.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_46.io.rdEna <= memReadDecoder.io.activatedSignals[14] @[ProcessingCore.scala 324:50]
                DualPortedMem_46.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_47.io.wrData <= activationBlock.io.activation[15] @[ProcessingCore.scala 319:51]
                DualPortedMem_47.io.wrEna <= memReadDecoder.io.activatedSignals[15] @[ProcessingCore.scala 320:51]
                DualPortedMem_47.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_47.io.rdEna <= memReadDecoder.io.activatedSignals[15] @[ProcessingCore.scala 324:50]
                DualPortedMem_47.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_48.io.wrData <= activationBlock.io.activation[16] @[ProcessingCore.scala 319:51]
                DualPortedMem_48.io.wrEna <= memReadDecoder.io.activatedSignals[16] @[ProcessingCore.scala 320:51]
                DualPortedMem_48.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_48.io.rdEna <= memReadDecoder.io.activatedSignals[16] @[ProcessingCore.scala 324:50]
                DualPortedMem_48.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_49.io.wrData <= activationBlock.io.activation[17] @[ProcessingCore.scala 319:51]
                DualPortedMem_49.io.wrEna <= memReadDecoder.io.activatedSignals[17] @[ProcessingCore.scala 320:51]
                DualPortedMem_49.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_49.io.rdEna <= memReadDecoder.io.activatedSignals[17] @[ProcessingCore.scala 324:50]
                DualPortedMem_49.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_50.io.wrData <= activationBlock.io.activation[18] @[ProcessingCore.scala 319:51]
                DualPortedMem_50.io.wrEna <= memReadDecoder.io.activatedSignals[18] @[ProcessingCore.scala 320:51]
                DualPortedMem_50.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_50.io.rdEna <= memReadDecoder.io.activatedSignals[18] @[ProcessingCore.scala 324:50]
                DualPortedMem_50.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_51.io.wrData <= activationBlock.io.activation[19] @[ProcessingCore.scala 319:51]
                DualPortedMem_51.io.wrEna <= memReadDecoder.io.activatedSignals[19] @[ProcessingCore.scala 320:51]
                DualPortedMem_51.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_51.io.rdEna <= memReadDecoder.io.activatedSignals[19] @[ProcessingCore.scala 324:50]
                DualPortedMem_51.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_52.io.wrData <= activationBlock.io.activation[20] @[ProcessingCore.scala 319:51]
                DualPortedMem_52.io.wrEna <= memReadDecoder.io.activatedSignals[20] @[ProcessingCore.scala 320:51]
                DualPortedMem_52.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_52.io.rdEna <= memReadDecoder.io.activatedSignals[20] @[ProcessingCore.scala 324:50]
                DualPortedMem_52.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_53.io.wrData <= activationBlock.io.activation[21] @[ProcessingCore.scala 319:51]
                DualPortedMem_53.io.wrEna <= memReadDecoder.io.activatedSignals[21] @[ProcessingCore.scala 320:51]
                DualPortedMem_53.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_53.io.rdEna <= memReadDecoder.io.activatedSignals[21] @[ProcessingCore.scala 324:50]
                DualPortedMem_53.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_54.io.wrData <= activationBlock.io.activation[22] @[ProcessingCore.scala 319:51]
                DualPortedMem_54.io.wrEna <= memReadDecoder.io.activatedSignals[22] @[ProcessingCore.scala 320:51]
                DualPortedMem_54.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_54.io.rdEna <= memReadDecoder.io.activatedSignals[22] @[ProcessingCore.scala 324:50]
                DualPortedMem_54.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_55.io.wrData <= activationBlock.io.activation[23] @[ProcessingCore.scala 319:51]
                DualPortedMem_55.io.wrEna <= memReadDecoder.io.activatedSignals[23] @[ProcessingCore.scala 320:51]
                DualPortedMem_55.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_55.io.rdEna <= memReadDecoder.io.activatedSignals[23] @[ProcessingCore.scala 324:50]
                DualPortedMem_55.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_56.io.wrData <= activationBlock.io.activation[24] @[ProcessingCore.scala 319:51]
                DualPortedMem_56.io.wrEna <= memReadDecoder.io.activatedSignals[24] @[ProcessingCore.scala 320:51]
                DualPortedMem_56.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_56.io.rdEna <= memReadDecoder.io.activatedSignals[24] @[ProcessingCore.scala 324:50]
                DualPortedMem_56.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_57.io.wrData <= activationBlock.io.activation[25] @[ProcessingCore.scala 319:51]
                DualPortedMem_57.io.wrEna <= memReadDecoder.io.activatedSignals[25] @[ProcessingCore.scala 320:51]
                DualPortedMem_57.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_57.io.rdEna <= memReadDecoder.io.activatedSignals[25] @[ProcessingCore.scala 324:50]
                DualPortedMem_57.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_58.io.wrData <= activationBlock.io.activation[26] @[ProcessingCore.scala 319:51]
                DualPortedMem_58.io.wrEna <= memReadDecoder.io.activatedSignals[26] @[ProcessingCore.scala 320:51]
                DualPortedMem_58.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_58.io.rdEna <= memReadDecoder.io.activatedSignals[26] @[ProcessingCore.scala 324:50]
                DualPortedMem_58.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_59.io.wrData <= activationBlock.io.activation[27] @[ProcessingCore.scala 319:51]
                DualPortedMem_59.io.wrEna <= memReadDecoder.io.activatedSignals[27] @[ProcessingCore.scala 320:51]
                DualPortedMem_59.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_59.io.rdEna <= memReadDecoder.io.activatedSignals[27] @[ProcessingCore.scala 324:50]
                DualPortedMem_59.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_60.io.wrData <= activationBlock.io.activation[28] @[ProcessingCore.scala 319:51]
                DualPortedMem_60.io.wrEna <= memReadDecoder.io.activatedSignals[28] @[ProcessingCore.scala 320:51]
                DualPortedMem_60.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_60.io.rdEna <= memReadDecoder.io.activatedSignals[28] @[ProcessingCore.scala 324:50]
                DualPortedMem_60.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_61.io.wrData <= activationBlock.io.activation[29] @[ProcessingCore.scala 319:51]
                DualPortedMem_61.io.wrEna <= memReadDecoder.io.activatedSignals[29] @[ProcessingCore.scala 320:51]
                DualPortedMem_61.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_61.io.rdEna <= memReadDecoder.io.activatedSignals[29] @[ProcessingCore.scala 324:50]
                DualPortedMem_61.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_62.io.wrData <= activationBlock.io.activation[30] @[ProcessingCore.scala 319:51]
                DualPortedMem_62.io.wrEna <= memReadDecoder.io.activatedSignals[30] @[ProcessingCore.scala 320:51]
                DualPortedMem_62.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_62.io.rdEna <= memReadDecoder.io.activatedSignals[30] @[ProcessingCore.scala 324:50]
                DualPortedMem_62.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              when rdWrEnaFlip : @[ProcessingCore.scala 318:30]
                DualPortedMem_63.io.wrData <= activationBlock.io.activation[31] @[ProcessingCore.scala 319:51]
                DualPortedMem_63.io.wrEna <= memReadDecoder.io.activatedSignals[31] @[ProcessingCore.scala 320:51]
                DualPortedMem_63.io.writeAddr <= vinAddr @[ProcessingCore.scala 321:51]
                instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 322:31]
                skip @[ProcessingCore.scala 318:30]
              else : @[ProcessingCore.scala 323:24]
                DualPortedMem_63.io.rdEna <= memReadDecoder.io.activatedSignals[31] @[ProcessingCore.scala 324:50]
                DualPortedMem_63.io.readAddr <= vinAddr @[ProcessingCore.scala 325:50]
                skip @[ProcessingCore.scala 323:24]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_213 = eq(UInt<2>("h02"), func) @[Conditional.scala 37:30]
              when _T_213 : @[Conditional.scala 39:67]
                node _instructionDone_T = not(rdWrEnaFlip) @[ProcessingCore.scala 330:45]
                instructionDone <= _instructionDone_T @[ProcessingCore.scala 330:42]
                node _rdDataVecValid_io_signal2delay_T = not(rdWrEnaFlip) @[ProcessingCore.scala 331:45]
                rdDataVecValid.io.signal2delay <= _rdDataVecValid_io_signal2delay_T @[ProcessingCore.scala 331:42]
                memReadDecoder.io.enable <= UInt<1>("h01") @[ProcessingCore.scala 332:42]
                node _memReadDecoder_io_PEs_T = bits(instructionRegister, 16, 14) @[ProcessingCore.scala 333:64]
                memReadDecoder.io.PEs <= _memReadDecoder_io_PEs_T @[ProcessingCore.scala 333:42]
                node _T_214 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_32.io.readAddr <= _T_214 @[ProcessingCore.scala 335:48]
                DualPortedMem_32.io.rdEna <= memReadDecoder.io.activatedSignals[0] @[ProcessingCore.scala 336:48]
                node _T_215 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_33.io.readAddr <= _T_215 @[ProcessingCore.scala 335:48]
                DualPortedMem_33.io.rdEna <= memReadDecoder.io.activatedSignals[1] @[ProcessingCore.scala 336:48]
                node _T_216 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_34.io.readAddr <= _T_216 @[ProcessingCore.scala 335:48]
                DualPortedMem_34.io.rdEna <= memReadDecoder.io.activatedSignals[2] @[ProcessingCore.scala 336:48]
                node _T_217 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_35.io.readAddr <= _T_217 @[ProcessingCore.scala 335:48]
                DualPortedMem_35.io.rdEna <= memReadDecoder.io.activatedSignals[3] @[ProcessingCore.scala 336:48]
                node _T_218 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_36.io.readAddr <= _T_218 @[ProcessingCore.scala 335:48]
                DualPortedMem_36.io.rdEna <= memReadDecoder.io.activatedSignals[4] @[ProcessingCore.scala 336:48]
                node _T_219 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_37.io.readAddr <= _T_219 @[ProcessingCore.scala 335:48]
                DualPortedMem_37.io.rdEna <= memReadDecoder.io.activatedSignals[5] @[ProcessingCore.scala 336:48]
                node _T_220 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_38.io.readAddr <= _T_220 @[ProcessingCore.scala 335:48]
                DualPortedMem_38.io.rdEna <= memReadDecoder.io.activatedSignals[6] @[ProcessingCore.scala 336:48]
                node _T_221 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_39.io.readAddr <= _T_221 @[ProcessingCore.scala 335:48]
                DualPortedMem_39.io.rdEna <= memReadDecoder.io.activatedSignals[7] @[ProcessingCore.scala 336:48]
                node _T_222 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_40.io.readAddr <= _T_222 @[ProcessingCore.scala 335:48]
                DualPortedMem_40.io.rdEna <= memReadDecoder.io.activatedSignals[8] @[ProcessingCore.scala 336:48]
                node _T_223 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_41.io.readAddr <= _T_223 @[ProcessingCore.scala 335:48]
                DualPortedMem_41.io.rdEna <= memReadDecoder.io.activatedSignals[9] @[ProcessingCore.scala 336:48]
                node _T_224 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_42.io.readAddr <= _T_224 @[ProcessingCore.scala 335:48]
                DualPortedMem_42.io.rdEna <= memReadDecoder.io.activatedSignals[10] @[ProcessingCore.scala 336:48]
                node _T_225 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_43.io.readAddr <= _T_225 @[ProcessingCore.scala 335:48]
                DualPortedMem_43.io.rdEna <= memReadDecoder.io.activatedSignals[11] @[ProcessingCore.scala 336:48]
                node _T_226 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_44.io.readAddr <= _T_226 @[ProcessingCore.scala 335:48]
                DualPortedMem_44.io.rdEna <= memReadDecoder.io.activatedSignals[12] @[ProcessingCore.scala 336:48]
                node _T_227 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_45.io.readAddr <= _T_227 @[ProcessingCore.scala 335:48]
                DualPortedMem_45.io.rdEna <= memReadDecoder.io.activatedSignals[13] @[ProcessingCore.scala 336:48]
                node _T_228 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_46.io.readAddr <= _T_228 @[ProcessingCore.scala 335:48]
                DualPortedMem_46.io.rdEna <= memReadDecoder.io.activatedSignals[14] @[ProcessingCore.scala 336:48]
                node _T_229 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_47.io.readAddr <= _T_229 @[ProcessingCore.scala 335:48]
                DualPortedMem_47.io.rdEna <= memReadDecoder.io.activatedSignals[15] @[ProcessingCore.scala 336:48]
                node _T_230 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_48.io.readAddr <= _T_230 @[ProcessingCore.scala 335:48]
                DualPortedMem_48.io.rdEna <= memReadDecoder.io.activatedSignals[16] @[ProcessingCore.scala 336:48]
                node _T_231 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_49.io.readAddr <= _T_231 @[ProcessingCore.scala 335:48]
                DualPortedMem_49.io.rdEna <= memReadDecoder.io.activatedSignals[17] @[ProcessingCore.scala 336:48]
                node _T_232 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_50.io.readAddr <= _T_232 @[ProcessingCore.scala 335:48]
                DualPortedMem_50.io.rdEna <= memReadDecoder.io.activatedSignals[18] @[ProcessingCore.scala 336:48]
                node _T_233 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_51.io.readAddr <= _T_233 @[ProcessingCore.scala 335:48]
                DualPortedMem_51.io.rdEna <= memReadDecoder.io.activatedSignals[19] @[ProcessingCore.scala 336:48]
                node _T_234 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_52.io.readAddr <= _T_234 @[ProcessingCore.scala 335:48]
                DualPortedMem_52.io.rdEna <= memReadDecoder.io.activatedSignals[20] @[ProcessingCore.scala 336:48]
                node _T_235 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_53.io.readAddr <= _T_235 @[ProcessingCore.scala 335:48]
                DualPortedMem_53.io.rdEna <= memReadDecoder.io.activatedSignals[21] @[ProcessingCore.scala 336:48]
                node _T_236 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_54.io.readAddr <= _T_236 @[ProcessingCore.scala 335:48]
                DualPortedMem_54.io.rdEna <= memReadDecoder.io.activatedSignals[22] @[ProcessingCore.scala 336:48]
                node _T_237 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_55.io.readAddr <= _T_237 @[ProcessingCore.scala 335:48]
                DualPortedMem_55.io.rdEna <= memReadDecoder.io.activatedSignals[23] @[ProcessingCore.scala 336:48]
                node _T_238 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_56.io.readAddr <= _T_238 @[ProcessingCore.scala 335:48]
                DualPortedMem_56.io.rdEna <= memReadDecoder.io.activatedSignals[24] @[ProcessingCore.scala 336:48]
                node _T_239 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_57.io.readAddr <= _T_239 @[ProcessingCore.scala 335:48]
                DualPortedMem_57.io.rdEna <= memReadDecoder.io.activatedSignals[25] @[ProcessingCore.scala 336:48]
                node _T_240 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_58.io.readAddr <= _T_240 @[ProcessingCore.scala 335:48]
                DualPortedMem_58.io.rdEna <= memReadDecoder.io.activatedSignals[26] @[ProcessingCore.scala 336:48]
                node _T_241 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_59.io.readAddr <= _T_241 @[ProcessingCore.scala 335:48]
                DualPortedMem_59.io.rdEna <= memReadDecoder.io.activatedSignals[27] @[ProcessingCore.scala 336:48]
                node _T_242 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_60.io.readAddr <= _T_242 @[ProcessingCore.scala 335:48]
                DualPortedMem_60.io.rdEna <= memReadDecoder.io.activatedSignals[28] @[ProcessingCore.scala 336:48]
                node _T_243 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_61.io.readAddr <= _T_243 @[ProcessingCore.scala 335:48]
                DualPortedMem_61.io.rdEna <= memReadDecoder.io.activatedSignals[29] @[ProcessingCore.scala 336:48]
                node _T_244 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_62.io.readAddr <= _T_244 @[ProcessingCore.scala 335:48]
                DualPortedMem_62.io.rdEna <= memReadDecoder.io.activatedSignals[30] @[ProcessingCore.scala 336:48]
                node _T_245 = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 335:70]
                DualPortedMem_63.io.readAddr <= _T_245 @[ProcessingCore.scala 335:48]
                DualPortedMem_63.io.rdEna <= memReadDecoder.io.activatedSignals[31] @[ProcessingCore.scala 336:48]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_246 = eq(UInt<2>("h03"), func) @[Conditional.scala 37:30]
                when _T_246 : @[Conditional.scala 39:67]
                  jumpIP <= UInt<1>("h01") @[ProcessingCore.scala 340:18]
                  when io.terminate : @[ProcessingCore.scala 341:29]
                    node _IPAddress_T = bits(instructionRegister, 26, 17) @[ProcessingCore.scala 342:45]
                    IPAddress <= _IPAddress_T @[ProcessingCore.scala 342:23]
                    skip @[ProcessingCore.scala 341:29]
                  else : @[ProcessingCore.scala 343:22]
                    node _IPAddress_T_1 = bits(instructionRegister, 16, 7) @[ProcessingCore.scala 344:45]
                    IPAddress <= _IPAddress_T_1 @[ProcessingCore.scala 344:23]
                    skip @[ProcessingCore.scala 343:22]
                  instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 346:27]
                  skip @[Conditional.scala 39:67]
          skip @[ProcessingCore.scala 278:40]
        else : @[ProcessingCore.scala 349:16]
          instructionDone <= UInt<1>("h01") @[ProcessingCore.scala 350:23]
          skip @[ProcessingCore.scala 349:16]
      skip @[ProcessingCore.scala 207:33]
    io.jumpIP <= jumpIP @[ProcessingCore.scala 355:18]
    io.increaseIP <= increaseIP @[ProcessingCore.scala 356:18]
    io.IPAddress <= IPAddress @[ProcessingCore.scala 357:18]
    io.action <= actionBlock.io.index @[ProcessingCore.scala 358:18]
    io.actionValid <= rdDataVecValid.io.delayedSignal @[ProcessingCore.scala 359:18]
    io.ready <= instructionDone @[ProcessingCore.scala 360:18]
    io.weightedSumValid <= adderTree.io.sumValid @[ProcessingCore.scala 363:29]
    io.weightedSum <= quantizedSum @[ProcessingCore.scala 364:29]
    node _io_dataValid_T = or(rdDataMatrixValid.io.delayedSignal, rdDataVecValid.io.delayedSignal) @[ProcessingCore.scala 365:68]
    io.dataValid <= _io_dataValid_T @[ProcessingCore.scala 365:29]
    
  module SinglePortedRam : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<10>, flip dataIn : UInt<32>, dataOut : UInt<32>, flip wrEna : UInt<1>, flip rdEna : UInt<1>}
    
    smem mem : UInt<32>[1024], undefined @[SRAM.scala 35:24]
    when io.wrEna : @[SRAM.scala 36:18]
      write mport MPORT = mem[io.addr], clock
      MPORT <= io.dataIn
      skip @[SRAM.scala 36:18]
    wire _io_dataOut_WIRE : UInt @[SRAM.scala 39:25]
    _io_dataOut_WIRE is invalid @[SRAM.scala 39:25]
    when io.rdEna : @[SRAM.scala 39:25]
      _io_dataOut_WIRE <= io.addr @[SRAM.scala 39:25]
      node _io_dataOut_T = or(_io_dataOut_WIRE, UInt<10>("h00")) @[SRAM.scala 39:25]
      node _io_dataOut_T_1 = bits(_io_dataOut_T, 9, 0) @[SRAM.scala 39:25]
      read mport io_dataOut_MPORT = mem[_io_dataOut_T_1], clock @[SRAM.scala 39:25]
      skip @[SRAM.scala 39:25]
    io.dataOut <= io_dataOut_MPORT @[SRAM.scala 39:14]
    
  module Agent : 
    input clock : Clock
    input reset : Reset
    output io : {flip x_initial : UInt<3>, flip y_initial : UInt<3>, flip loadInitalState : UInt<1>, flip mazeSize : UInt<3>, flip action : UInt<2>, flip actionValid : UInt<1>, flip reward : SInt<3>, state : UInt<6>, observe : UInt<1>, terminate : UInt<1>, newStateFound : UInt<1>}
    
    reg mazeSize : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Agent.scala 19:26]
    reg x : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Agent.scala 20:26]
    reg y : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Agent.scala 21:26]
    wire observe : UInt<1> @[Agent.scala 22:23]
    when io.loadInitalState : @[Agent.scala 24:27]
      x <= io.x_initial @[Agent.scala 25:15]
      y <= io.y_initial @[Agent.scala 26:15]
      mazeSize <= io.mazeSize @[Agent.scala 27:15]
      skip @[Agent.scala 24:27]
    when io.actionValid : @[Agent.scala 30:23]
      observe <= UInt<1>("h01") @[Agent.scala 31:13]
      node _T = eq(io.action, UInt<1>("h00")) @[Agent.scala 32:20]
      when _T : @[Agent.scala 32:28]
        node _x_T = add(x, UInt<1>("h01")) @[Agent.scala 33:14]
        node _x_T_1 = tail(_x_T, 1) @[Agent.scala 33:14]
        x <= _x_T_1 @[Agent.scala 33:9]
        skip @[Agent.scala 32:28]
      else : @[Agent.scala 34:34]
        node _T_1 = eq(io.action, UInt<1>("h01")) @[Agent.scala 34:26]
        when _T_1 : @[Agent.scala 34:34]
          node _y_T = sub(y, UInt<1>("h01")) @[Agent.scala 35:14]
          node _y_T_1 = tail(_y_T, 1) @[Agent.scala 35:14]
          y <= _y_T_1 @[Agent.scala 35:9]
          skip @[Agent.scala 34:34]
        else : @[Agent.scala 36:34]
          node _T_2 = eq(io.action, UInt<2>("h02")) @[Agent.scala 36:26]
          when _T_2 : @[Agent.scala 36:34]
            node _x_T_2 = sub(x, UInt<1>("h01")) @[Agent.scala 37:14]
            node _x_T_3 = tail(_x_T_2, 1) @[Agent.scala 37:14]
            x <= _x_T_3 @[Agent.scala 37:9]
            skip @[Agent.scala 36:34]
          else : @[Agent.scala 38:16]
            node _y_T_2 = add(y, UInt<1>("h01")) @[Agent.scala 39:14]
            node _y_T_3 = tail(_y_T_2, 1) @[Agent.scala 39:14]
            y <= _y_T_3 @[Agent.scala 39:9]
            skip @[Agent.scala 38:16]
      skip @[Agent.scala 30:23]
    else : @[Agent.scala 41:14]
      observe <= UInt<1>("h00") @[Agent.scala 42:13]
      skip @[Agent.scala 41:14]
    node _T_3 = eq(io.reward, asSInt(UInt<3>("h02"))) @[Agent.scala 45:18]
    when _T_3 : @[Agent.scala 45:26]
      io.terminate <= UInt<1>("h01") @[Agent.scala 46:18]
      skip @[Agent.scala 45:26]
    else : @[Agent.scala 47:14]
      io.terminate <= UInt<1>("h00") @[Agent.scala 48:18]
      skip @[Agent.scala 47:14]
    reg io_observe_REG : UInt<1>, clock @[Agent.scala 50:24]
    io_observe_REG <= observe @[Agent.scala 50:24]
    io.observe <= io_observe_REG @[Agent.scala 50:14]
    node _io_state_T = mul(y, mazeSize) @[Agent.scala 51:24]
    node _io_state_T_1 = add(x, _io_state_T) @[Agent.scala 51:21]
    node _io_state_T_2 = tail(_io_state_T_1, 1) @[Agent.scala 51:21]
    io.state <= _io_state_T_2 @[Agent.scala 51:16]
    reg io_newStateFound_REG : UInt<1>, clock @[Agent.scala 52:30]
    io_newStateFound_REG <= io.actionValid @[Agent.scala 52:30]
    io.newStateFound <= io_newStateFound_REG @[Agent.scala 52:20]
    
  module Environment : 
    input clock : Clock
    input reset : Reset
    output io : {flip state : UInt<5>, flip rewardIn : SInt<3>, flip wrEna : UInt<1>, flip rdEna : UInt<1>, reward : SInt<3>}
    
    smem environment : SInt<3>[25], undefined @[Environment.scala 14:32]
    when io.wrEna : @[Environment.scala 15:17]
      write mport MPORT = environment[io.state], clock
      MPORT <= io.rewardIn
      skip @[Environment.scala 15:17]
    wire _io_reward_WIRE : UInt @[Environment.scala 18:32]
    _io_reward_WIRE is invalid @[Environment.scala 18:32]
    when io.rdEna : @[Environment.scala 18:32]
      _io_reward_WIRE <= io.state @[Environment.scala 18:32]
      node _io_reward_T = or(_io_reward_WIRE, UInt<5>("h00")) @[Environment.scala 18:32]
      node _io_reward_T_1 = bits(_io_reward_T, 4, 0) @[Environment.scala 18:32]
      read mport io_reward_MPORT = environment[_io_reward_T_1], clock @[Environment.scala 18:32]
      skip @[Environment.scala 18:32]
    io.reward <= io_reward_MPORT @[Environment.scala 18:13]
    
  module DQNAccelertorTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip instruction : UInt<32>, flip wrEna : UInt<1>, flip instructionAddr : UInt<10>, flip pointIR : UInt<1>, flip runProgram : UInt<1>, doneInference : UInt<1>, flip rewardIn : SInt<3>, flip state : UInt<5>, flip wrEnaEnv : UInt<1>, flip x_initial : UInt<3>, flip y_initial : UInt<3>, flip loadInitalState : UInt<1>, flip mazeSize : UInt<3>, newStateFound : UInt<1>, nextState : UInt<5>}
    
    inst DQNCore of ProcessingCore @[DQNAcceleratorTop.scala 64:23]
    DQNCore.clock <= clock
    DQNCore.reset <= reset
    inst instructionMemory of SinglePortedRam @[SRAM.scala 47:81]
    instructionMemory.clock <= clock
    instructionMemory.reset <= reset
    inst agent of Agent @[DQNAcceleratorTop.scala 68:34]
    agent.clock <= clock
    agent.reset <= reset
    inst environment of Environment @[DQNAcceleratorTop.scala 69:34]
    environment.clock <= clock
    environment.reset <= reset
    reg instructionPointer : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[DQNAcceleratorTop.scala 70:35]
    reg instructionValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DQNAcceleratorTop.scala 71:35]
    wire rdEna : UInt<1>
    rdEna <= UInt<1>("h00")
    when io.pointIR : @[DQNAcceleratorTop.scala 76:19]
      instructionPointer <= io.instructionAddr @[DQNAcceleratorTop.scala 77:24]
      skip @[DQNAcceleratorTop.scala 76:19]
    else : @[DQNAcceleratorTop.scala 78:32]
      when DQNCore.io.jumpIP : @[DQNAcceleratorTop.scala 78:32]
        instructionPointer <= DQNCore.io.IPAddress @[DQNAcceleratorTop.scala 79:24]
        rdEna <= UInt<1>("h01") @[DQNAcceleratorTop.scala 80:24]
        instructionValid <= UInt<1>("h01") @[DQNAcceleratorTop.scala 81:24]
        skip @[DQNAcceleratorTop.scala 78:32]
      else : @[DQNAcceleratorTop.scala 82:36]
        when DQNCore.io.increaseIP : @[DQNAcceleratorTop.scala 82:36]
          node _instructionPointer_T = add(instructionPointer, UInt<1>("h01")) @[DQNAcceleratorTop.scala 83:46]
          node _instructionPointer_T_1 = tail(_instructionPointer_T, 1) @[DQNAcceleratorTop.scala 83:46]
          instructionPointer <= _instructionPointer_T_1 @[DQNAcceleratorTop.scala 83:24]
          rdEna <= UInt<1>("h01") @[DQNAcceleratorTop.scala 84:24]
          instructionValid <= UInt<1>("h01") @[DQNAcceleratorTop.scala 85:24]
          skip @[DQNAcceleratorTop.scala 82:36]
        else : @[DQNAcceleratorTop.scala 86:28]
          when io.runProgram : @[DQNAcceleratorTop.scala 86:28]
            node _instructionPointer_T_2 = add(instructionPointer, UInt<1>("h01")) @[DQNAcceleratorTop.scala 87:46]
            node _instructionPointer_T_3 = tail(_instructionPointer_T_2, 1) @[DQNAcceleratorTop.scala 87:46]
            instructionPointer <= _instructionPointer_T_3 @[DQNAcceleratorTop.scala 87:24]
            rdEna <= UInt<1>("h01") @[DQNAcceleratorTop.scala 88:24]
            instructionValid <= UInt<1>("h01") @[DQNAcceleratorTop.scala 89:24]
            skip @[DQNAcceleratorTop.scala 86:28]
          else : @[DQNAcceleratorTop.scala 90:31]
            when DQNCore.io.ready : @[DQNAcceleratorTop.scala 90:31]
              instructionValid <= UInt<1>("h00") @[DQNAcceleratorTop.scala 91:22]
              skip @[DQNAcceleratorTop.scala 90:31]
    when io.wrEna : @[DQNAcceleratorTop.scala 94:17]
      instructionMemory.io.addr <= io.instructionAddr @[DQNAcceleratorTop.scala 95:31]
      skip @[DQNAcceleratorTop.scala 94:17]
    else : @[DQNAcceleratorTop.scala 96:14]
      instructionMemory.io.addr <= instructionPointer @[DQNAcceleratorTop.scala 97:31]
      skip @[DQNAcceleratorTop.scala 96:14]
    instructionMemory.io.wrEna <= io.wrEna @[DQNAcceleratorTop.scala 101:31]
    instructionMemory.io.dataIn <= io.instruction @[DQNAcceleratorTop.scala 102:31]
    instructionMemory.io.rdEna <= rdEna @[DQNAcceleratorTop.scala 103:31]
    environment.io.wrEna <= io.wrEnaEnv @[DQNAcceleratorTop.scala 105:31]
    environment.io.rewardIn <= io.rewardIn @[DQNAcceleratorTop.scala 106:31]
    when io.wrEnaEnv : @[DQNAcceleratorTop.scala 108:20]
      environment.io.state <= io.state @[DQNAcceleratorTop.scala 109:26]
      skip @[DQNAcceleratorTop.scala 108:20]
    else : @[DQNAcceleratorTop.scala 110:14]
      environment.io.state <= agent.io.state @[DQNAcceleratorTop.scala 111:26]
      skip @[DQNAcceleratorTop.scala 110:14]
    agent.io.reward <= environment.io.reward @[DQNAcceleratorTop.scala 114:28]
    agent.io.x_initial <= io.x_initial @[DQNAcceleratorTop.scala 115:28]
    agent.io.y_initial <= io.y_initial @[DQNAcceleratorTop.scala 116:28]
    agent.io.loadInitalState <= io.loadInitalState @[DQNAcceleratorTop.scala 117:28]
    agent.io.mazeSize <= io.mazeSize @[DQNAcceleratorTop.scala 118:28]
    environment.io.rdEna <= agent.io.observe @[DQNAcceleratorTop.scala 119:28]
    agent.io.actionValid <= DQNCore.io.actionValid @[DQNAcceleratorTop.scala 121:31]
    agent.io.action <= DQNCore.io.action @[DQNAcceleratorTop.scala 122:31]
    DQNCore.io.terminate <= agent.io.terminate @[DQNAcceleratorTop.scala 123:31]
    DQNCore.io.state <= agent.io.state @[DQNAcceleratorTop.scala 124:31]
    DQNCore.io.instruction <= instructionMemory.io.dataOut @[DQNAcceleratorTop.scala 125:31]
    DQNCore.io.instructionValid <= instructionValid @[DQNAcceleratorTop.scala 126:31]
    io.doneInference <= agent.io.terminate @[DQNAcceleratorTop.scala 129:20]
    io.nextState <= agent.io.state @[DQNAcceleratorTop.scala 130:20]
    io.newStateFound <= agent.io.newStateFound @[DQNAcceleratorTop.scala 131:20]
    
